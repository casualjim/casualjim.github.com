<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ivan Porto Carrero]]></title>
  <link href="http://flanders.co.nz/categories/ruby/atom.xml" rel="self"/>
  <link href="http://flanders.co.nz/"/>
  <updated>2012-04-24T00:43:57+02:00</updated>
  <id>http://flanders.co.nz/</id>
  <author>
    <name><![CDATA[Ivan Porto Carrero]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IronNails: Some progress]]></title>
    <link href="http://flanders.co.nz/2008/08/19/ironnails-some-progress/"/>
    <updated>2008-08-19T07:50:14+02:00</updated>
    <id>http://flanders.co.nz/2008/08/19/ironnails-some-progress</id>
    <content type="html"><![CDATA[<p>I thought it might be a good idea to update you guys on how IronNails is progressing. I think I've got it so that you aren't exposed to writing many of the boring boilerplate code that comes with taking this approach (M - V - VM- C). Also to execute an action on a controller asynchronously you can by just adding :mode => :asynchronous to your view_action declaration.</p>

<p>A lot is still left to do but this proves that it is possible to use IronRuby today to do some pretty cool stuff. From the top of my head here are some things that still need to be done:</p>

<ul>
<li><p>The ability to load xaml from an assembly like the one that is generated when you use Blend for your design.</p></li>
<li><p>More predefined behaviors</p></li>
<li><p>Templated generators</p></li>
<li><p>Silverlight support</p></li>
</ul>


<p>But the core of the framework is working. Now it's a matter of extending the functionality. Some of the features the framework does support</p>

<ul>
<li><p>Binding to controller actions through commands</p></li>
<li><p>Binding to controller actions through event handlers on the view proxy</p></li>
<li><p>Asynchronous execution of actions</p></li>
<li><p>Timed execution of actions</p></li>
<li><p>Binding to models</p></li>
</ul>


<p>I will be developing my sample for my chapter against this framework and will add the pieces I'm missing as I get on.</p>

<p>Some of the things I foresee that might need to be added are:</p>

<ul>
<li><p>support for controlling the application from an IronRuby console so that you can interact with the interface as it is running.</p></li>
<li><p>support for a console to interact with the code of the application.</p></li>
<li><p>support for plugins</p></li>
</ul>


<p>So after all these lists how would an application look like when you are developing it?</p>

<p>The controller:</p>

<p>``` ruby demo_controller.rb  <br/>
class DemoController &lt; IronNails::Controller::Base
  view_object :status_bar_message, "The status bar message"</p>

<p>  view_action :change_message</p>

<p>  def change_message</p>

<pre><code>@status_bar_message = "#@status_bar_message appended"
</code></pre>

<p>  end
end
```</p>

<p>The ViewModel:</p>

<p><code>csharp DemoViewModel.cs
public class DemoViewModel : IronNails.View.ViewModel { }
</code></p>

<p>The View:</p>

<p>``` xml  <br/>
&lt;Window</p>

<pre><code>xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:behaviors="clr-namespace:IronNails.Library.Behaviors;assembly=IronNails.Library"
Title="Window1" Height="300" Width="300"&gt;
&lt;StackPanel&gt;
    &lt;TextBlock Text="{Binding Objects[StatusBarMessage].Value}" &gt;&lt;/TextBlock&gt;
    &lt;Button Content="Click me" behaviors:ClickBehavior.LeftClick="{Binding Commands[ChangeMessage]}" /&gt;
&lt;/StackPanel&gt;
</code></pre>

<p></Window>
```</p>

<p>There are currently 2 dictionaries available to the view. One that contains the models (Objects) and one that contains the commands (Commands). The value of an entry in the Objects needs to be observable by implementing INotifyPropertyChanged and that is what's responsible for the binding syntax Objects[ModelName].Value</p>

<p>At this moment there are only a couple of behaviors implemented: LeftClick, RightClick, DoubleClick and Hover.</p>

<p>The framework expects that you follow the basic naming conventions of the technology you're programming in. So in ruby you underscore names but in C# and xaml you camelcase them.</p>

<p>By defining an object with view_object :object_name, default value you define it with a default value that you can change afterwards in the controller actions. By defining an action with view_action :action_name, :mode => :asynchronous you tell that framework that you want to link a method or a block as a controller action and execute it asynchronously.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IronNails : Rails like development for IronRuby with WPF/Silverlight]]></title>
    <link href="http://flanders.co.nz/2008/08/07/ironnails-introduction/"/>
    <updated>2008-08-07T15:23:43+02:00</updated>
    <id>http://flanders.co.nz/2008/08/07/ironnails-introduction</id>
    <content type="html"><![CDATA[<p>For my book IronRuby I'm working on chapter 4. That chapter is about doing WPF development with IronRuby. I started out with a straight port of <a href="http://code.google.com/p/wittytwitter">Witty</a> to IronRuby. As I was doing that the cogs started turning and I came up with a way to bring the rails style of development to WPF. I decided to investigate that route a little bit further and now I have a small framework that enables you to write WPF applications with the MVC paradigm. I decided to open that code up as open source and host it on github.</p>

<p>At first I used the name Sails for my framework but it turns out there is java clone of rails that is called opensails. So to avoid confusion David M. Peterson proposed the name IronNails.</p>

<blockquote><p>On Sat, 02 Aug 2008 08:00:44 -0600, Charles Oliver Nutter wrote:</p>

<p>FYI, there's already a framework named "Sails" for Java:      <br/>
<a href="http://www.opensails.org/">http://www.opensails.org/</a></p>

<p>For the sake of sticking to the "Iron" theme, why not replace the 'S' with an 'N' and go with IronNails. ;-) Maybed it's just me, but if given the choice, I'd much rather nail it than sail it any day of the week. :D</p>

<p>--      <br/>
/M:D</p>

<p>M. David Peterson</p></blockquote>

<p>You can find the project here: <a href="http://github.com/casualjim/ironnails">http://github.com/casualjim/ironnails</a></p>

<p>At this moment it's definitely not finished at all, but it does work. The remainder of the week I'll move my previous demo code onto this framework, update the code samples in my chapter and finish the content. I hope I will have all of this done by the end of next week.</p>

<p>Back to the IronNails project:</p>

<p>Because DLR objects cannot be used to bind to in WPF you have to define a skeleton of the ViewModel in C#, but this will change in the future. When that changes I'll look at extending the framework to make use of some other WPF patterns like defining a DependencyObject and Behaviors. Once those are defined you get a very clean separation between design and behavior.</p>

<p>This is abstracted away from you but in the background the framework works with the View - ViewModel - Model - Controller pattern although I've tried to keep your exposure to the view model to a minimum. The framework follows naming conventions per language. So in C# and XAML you camel case stuff and in IronRuby you underscore stuff.</p>

<p>The very core of the framework is defined in C# but most of the code is IronRuby, depending on how hard it will be after the DLR RTM's I may look at adding support for all the DLR languages.</p>

<blockquote><h1>IronNails        </h1>

<p>IronNails is a framework inspired by the Rails and rucola frameworks. It offers a rails-like way of developing      <br/>
applications with IronRuby and Windows Presentation Foundation (WPF).       <br/>
This framework uses the pattern Model - ViewModel - View - Controller (M-VM-V-C). It should be able to run on both WPF       <br/>
and Silverlight.       <br/>
The idea is that the views can be created using a design tool like Blend for example and just save that xaml as is. The       <br/>
designer should not need to use anything else than drag and drop to create a GUI design. The behaviors are then added to       <br/>
the view by using predefined behaviors in the framework or by defining your own behavior.       <br/>
The framework then generates a proxy for the view which will be used to transparently wire up the commands in the       <br/>
behaviors to controller actions.</p></blockquote>

<p>You are now able to write the following code for a controller:</p>

<p>``` ruby  <br/>
class MyController &lt; IronNails::Controller::Base</p>

<p>  view_action :show_message, :triggers => :my_button do</p>

<pre><code>MessageBox.show "This is the great message from a block"
</code></pre>

<p>  end</p>

<p>  view_action :change_color, :triggers => { :element => :my_text_block, :event => :mouse_enter }
  view_action :reset_color, :triggers => { :element => :my_text_block, :event => :mouse_leave } do |view|</p>

<pre><code>view.my_text_block.foreground = :black.to_brush
</code></pre>

<p>  end</p>

<p>  view_object :people, Person.find_all</p>

<p>  def change_color(view)</p>

<pre><code>view.my_text_block.foreground = :red.to_brush
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>At this moment the project has 0 unit tests, it has below minimal documentation and it still needs a work like defining the behaviors. I have to move on with my book but intend to continue developing this framework after my book is finished and IronRuby RTM's. There are some more workarounds in the project that will all disappear as IronRuby progresses.</p>

<p><a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fflanders.co.nz%2f2008%2f08%2f07%2fironnails-introduction%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fflanders.co.nz%2f2008%2f08%2f07%2fironnails-introduction%2f" alt="kick it on DotNetKicks.com" /></a></p>

<p>Technorati Tags: <a href="http://technorati.com/tags/IronRuby">IronRuby</a>,<a href="http://technorati.com/tags/IronRubyInAction">IronRubyInAction</a>,<a href="http://technorati.com/tags/IronNails">IronNails</a>,<a href="http://technorati.com/tags/WPF">WPF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated my lightspeed model generator]]></title>
    <link href="http://flanders.co.nz/2008/04/09/updated-my-lightspeed-model-generator/"/>
    <updated>2008-04-09T18:53:06+02:00</updated>
    <id>http://flanders.co.nz/2008/04/09/updated-my-lightspeed-model-generator</id>
    <content type="html"><![CDATA[<p>This week I could start a project that has a database that goes somewhat beyond a blog. This seemed to me like the best way to improve my model generator that <a href="http://flanders.co.nz/2008/02/09/using-ruby-to-generate-lightspeed-models-part-4-again/">I built earlier</a></p>

<p>And as expected I needed to tweak it a little so that it would work properly, and I added a feature.</p>

<p>Seen as there are 2 files generated for an entity if you add a private field that exists in the database there then the generator will skip it so that you can add more attributes than the ones this script generates for you. If you override a field you also have to put the property in the user file.</p>

<p>I also added support for generating a datacontext. If you want to use the Linq support that Lightspeed is getting then that is a starting point. The same goes for this class with user files and generated file as above, the user file takes precedence.</p>

<p>I hosted this project on <a href="http://code.google.com/p/model-generator-ruby/">google code</a> so you can check it out from there. Or you can download <a href="http://model-generator-ruby.googlecode.com/files/generate_ls_models.zip">todays version</a></p>

<p><a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fflanders.co.nz%2f2008%2f04%2f09%2fupdated-my-lightspeed-model-generator%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fflanders.co.nz%2f2008%2f04%2f09%2fupdated-my-lightspeed-model-generator%2f" alt="kick it on DotNetKicks.com" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby to Generate LightSpeed Models - Part 4]]></title>
    <link href="http://flanders.co.nz/2008/02/09/using-ruby-to-generate-lightspeed-models-part-4-again/"/>
    <updated>2008-02-09T05:27:42+01:00</updated>
    <id>http://flanders.co.nz/2008/02/09/using-ruby-to-generate-lightspeed-models-part-4-again</id>
    <content type="html"><![CDATA[<p><strong><a href="http://flanders.co.nz/2008/04/09/updated-my-lightspeed-model-generator/">UPDATE</a>: I have an update <a href="http://flanders.co.nz/2008/04/09/updated-my-lightspeed-model-generator/">here</a> with a new version and the location on google code where the project is hosted now.</strong></p>

<p>In the previous 3 parts (<a href="http://flanders.co.nz/blog/archive/2008/02/05/using-ruby-to-generate-lightspeed-models---part-1.aspx">part 1</a>, <a href="http://flanders.co.nz/blog/archive/2008/02/05/using-ruby-to-generate-lightspeed-models.aspx">part 2</a>, <a href="http://flanders.co.nz/blog/archive/2008/02/06/using-ruby-to-generate-lightspeed-models---part-3.aspx">part 3</a>) we talked about getting the meta data out of the database and generating the lightspeed entities in memory.</p>

<p>I won't put the code listings up in this blog post but instead will give you a <a href="http://flanders.co.nz/wp-content/uploads/2008/04/generate_ls_models.zip">link</a> to the complete code :) You can download the express edition of <a href="http://www.mindscape.co.nz/Products/lightspeed/default.aspx">LightSpeed</a> and try it for yourself if you want.</p>

<p>Instead I'll talk about how you can use the ruby script to generate the models from an existing database.</p>

<p>It adds the generated files to the visual studio project file in the same directory or you can specify one.</p>

<p>Currently it only supports Sql Server 2005. You need to create a project first in visual studio so we have a project file to add items to.</p>

<p>To use it you have to tell it which database it has to find by putting a database.yml file in your visual studio project directory.</p>

<p>The content of that database.yml file may look as follows</p>

<h1>on windows you can use the following connection string</h1>

<pre><code>#
# sqlserver:
# database: northwind
# host: localhost
# username: sa
# password: MaybePassword123
#
#
# on OSX and Linux you can connect to sql server through odbc (iODBC or unixODBC in combination with FreeTDS)
#
# sqlserver:
# dsn: NorthwindSql
# username: sa
# password: MaybePassword123
</code></pre>

<p>when you've done that you can execute it like shown in the screenshot below:</p>

<p><a href="http://flanders.co.nz/blog/images/UsingRubytoGenerateLightSpeedModelsPart4_1018B/Terminalscreenshot.jpg"><img src="http://flanders.co.nz/blog/images/UsingRubytoGenerateLightSpeedModelsPart4_1018B/Terminalscreenshot_thumb.jpg" alt="Terminal-screenshot" /></a></p>

<p>I have a database.yml file in the directory and I execute the command ruby &lt;> on linux and OSX you can chmod +x that path and then you don't have to type ruby anymore.</p>

<p>That will generate the models for your database provided that your database conforms to the conventions needed for LightSpeed.</p>

<p>The next step would be to open visuals studio and build the project. The files got added in visual studio every entity are 2 files one with the generated code and one empty one that you can use to implement behavior on the model if you would want to.</p>

<p>The first picture shows how the solution explorer looks and the second one shows the results of the build without having touched one file after generation.</p>

<p>In the download there is a folder db which contains a slightly modified script from the Northwind database that comes with the samples for lightspeed. I used that database because it has every type of relationship and the script did conform to the lightspeed conventions :)</p>

<p><a href="http://flanders.co.nz/blog/images/UsingRubytoGenerateLightSpeedModelsPart4_1018B/LightSpeedGenerateTest.jpg"><img src="http://flanders.co.nz/blog/images/UsingRubytoGenerateLightSpeedModelsPart4_1018B/LightSpeedGenerateTest_thumb.jpg" alt="LightSpeedGenerateTest" /></a></p>

<p><a href="http://flanders.co.nz/blog/images/UsingRubytoGenerateLightSpeedModelsPart4_1018B/LightSpeedGenerateTestBuildResult.jpg"><img src="http://flanders.co.nz/blog/images/UsingRubytoGenerateLightSpeedModelsPart4_1018B/LightSpeedGenerateTestBuildResult_thumb.jpg" alt="LightSpeedGenerateTestBuildResult" /></a></p>

<p><a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fflanders.co.nz%2fblog%2farchive%2f2008%2f02%2f09%2fusing-ruby-to-generate-lightspeed-models---part-4-again.aspx"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fflanders.co.nz%2fblog%2farchive%2f2008%2f02%2f09%2fusing-ruby-to-generate-lightspeed-models---part-4-again.aspx" alt="kick it on DotNetKicks.com" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby to Generate LightSpeed Models - Part 3]]></title>
    <link href="http://flanders.co.nz/2008/02/05/using-ruby-to-generate-lightspeed-models-part-3/"/>
    <updated>2008-02-05T20:51:04+01:00</updated>
    <id>http://flanders.co.nz/2008/02/05/using-ruby-to-generate-lightspeed-models-part-3</id>
    <content type="html"><![CDATA[<p>First off I'm writing with windows live writer again, ecto wasn't up to the job. It tried to "clean" my html, granted it was messy but it should leave my text untouched. The whole editing experience wasn't satisfying enough. And Ecto already seemed like the best blog editor for mac, slim pickings indeed. From my tools I expect foremost that they stay out of my way and it didn't. I just talked with <a href="http://codeclimber.net.nz">Simone</a> about looking at making a .NET based client that runs on mono, we'll see where that plan goes because I don't really have time to do that for the moment.</p>

<p>In the previous posts in this series (<a href="http://flanders.co.nz/blog/archive/2008/02/05/using-ruby-to-generate-lightspeed-models---part-1.aspx">part 1</a>, <a href="http://flanders.co.nz/blog/archive/2008/02/05/using-ruby-to-generate-lightspeed-models.aspx">part 2</a>) we discovered how to connect to the database and how to get the meta data about that database out. Maybe I should also explain why I'm doing this series with <a href="http://www.mindscape.co.nz/Products/lightspeed/default.aspx">LightSpeed</a> instead of <a href="http://castleproject.org/activerecord/index.html">ActiveRecord</a> from <a href="http://castleproject.org/">Castle</a> or <a href="http://www.subsonicproject.com/">SubSonic</a> or Linq2Sql for that matter. I will definitely touch on all those orms in the coming week, but I started with LightSpeed because it's the easiest ORM I've ever used.</p>

<p>This post will deal with actually doing something useful with that meta data. Today we're going to generate the represenation of the entities and their properties. Tomorrow we'll deal with actually generating the files from the the in-memory presentation we're generating today.</p>

<p>We're going to need 2 classes in addition to the LightSpeedRepository class. One to represent an entity and one to represent a property. The goal is for tomorrow to render the entities as complete as possible with validation attributes etc.</p>

<p>And without further ado here are the specs we're going to build:</p>

<pre><code>LightSpeedRepository Conversion      
- should convert a given table to light speed metadata       
- should convert a given table without relations to a light speed entity definition       
- should convert a given table with a m:1 relation to a light speed entity definition       
- should convert a given table with a 1:m relation to a light speed entity definition       
- should convert a given table with a m:n relation to a light speed entity definition 



LightSpeedProperty      
- should allow for a property to be set       
- should return a predicate for booleans       
- should return a predicate for booleans       
- should return a sql type       
- should be a lightSpeed property 



LightSpeedEntity      
- should have properties, has many, belongs to and through associations       
- should create a valid property name if one doesn't exists already in the through association properties       
- should create a valid property name if one doesn't exists already in the has many properties       
- should create a valid property name if one doesn't exists already in the belongs to properties       
- should create a valid property name if one doesn't exists already in the properties       
- should create a valid property name if one already exists in the through association properties       
- should create a valid property name if one already exists in the has many properties       
- should create a valid property name if one already exists in the belongs to properties       
- should create a valid property name if one already exists in the properties       
- should create a valid property name if two already exist in the through association properties       
- should create a valid property name if two already exist in the has many properties       
- should create a valid property name if two already exist in the belongs to properties       
- should create a valid property name if two already exist in the properties
</code></pre>

<p>Let's start with looking at the LightSpeedProperty first. The attributes on this class are implemented using some simple <a href="http://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>. This class will represent a field in a LightSpeed entity and will take care of rendering that properly into the c# file. We actually create the data in the LightSpeedRepository class.</p>

<p>``` ruby  <br/>
class LightSpeedProperty</p>

<p>  attr_accessor :attributes</p>

<p>  def initialize(params = {})</p>

<pre><code>@attributes = params
LightSpeedProperty.create_methods params
</code></pre>

<p>  end</p>

<p>  def <a href="attribute"></a></p>

<pre><code>attributes[attribute]
</code></pre>

<p>  end</p>

<p>  def self.create_methods(params)</p>

<pre><code>params.each do |k, v|
  define_method("#{k}=") do |val|
    @attributes[k]= val
  end

  predicate = %w(primary_key foreign_key unique nullable).any? { |o| o === k.to_s }

  define_method(predicate ? "#{k}?" : "#{k}") do
    @attributes[k]
  end

end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>In the LightSpeed entity class we describe the actual Entity. I monkey patched Array so that I could ask it the question if it has a particular property. To avoid naming conflicts we check for properties that exist already and otherwise give them a generic new name by appending a number.</p>

<p>``` ruby  <br/>
class Array</p>

<p>  def has_property?(name)</p>

<pre><code>exists = false

each do |hm|
  exists = hm[:name] == name
  break if exists
end

exists
</code></pre>

<p>  end
end</p>

<p>class LightSpeedEntity
  attr_accessor :properties, :belongs_to, :has_many, :through_associations, :name, :namespace</p>

<p>  def initialize</p>

<pre><code>@properties = []
@belongs_to = []
@has_many = []
@through_associations =[]
</code></pre>

<p>  end</p>

<p>  def create_property_name_from(from, idx=0)</p>

<pre><code>tname = build_property_name_from from, idx
idx += 1 #when the property exists try with a higher number
return create_property_name_from(from, idx) if has_property?(tname)
tname
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def has_property?(tname)
  properties.has_property? tname or has_many.has_property? tname or belongs_to.has_property? tname or through_associations.has_property? tname
end

def build_property_name_from(from, idx)
  if idx == 0
    from
  else
    "#{from}#{idx}"
  end
end
</code></pre>

<p>end
```</p>

<p>And this brings us to our last class of today the Repository class. We mixin the DB::MetaData module we created yesterday. Define a read_only property entities, make sure we can set a namespace for our generated entities. The first step is to transform the meta data into data that we can use to represent a LightSpeed Entity. The second and last step of today is to generate the entities with the lightspeed meta data. We have to skip the primary key because that is defined by convention in LightSpeed.</p>

<p>``` ruby  <br/>
class LightSpeedRepository</p>

<p>  include DB::MetaData</p>

<p>  attr_reader :entities
  attr_accessor :namespace</p>

<p>  def initialize()</p>

<pre><code>@entities = []
super
</code></pre>

<p>  end</p>

<p>  def to_light_speed_meta_data</p>

<pre><code>tables.collect do |table|
  col_infos = column_info_for table[:name]

  field_infos = col_infos.collect do |col_info|
    {
      :name =&gt; col_info[:name].underscore,
      :sql_type =&gt; col_info[:sql_type],
      :max_length =&gt; col_info[:max_length].to_i,
      :nullable =&gt; !col_info[:is_nullable].to_i.zero?,  
      :precision =&gt; col_info[:precision],
      :foreign_key =&gt; foreign_key?(col_info),
      :primary_key =&gt; primary_key?(col_info),
      :unique =&gt; !col_info[:is_unique].to_i.zero?
    }
  end

  { :table_name =&gt; table[:name], :class_name =&gt; table[:name].singularize.camelize, :fields =&gt; field_infos }
end
</code></pre>

<p>  end</p>

<p>  def generate_entities</p>

<pre><code>meta_data = to_light_speed_meta_data
meta_data.each do |md|
  @entities &lt;&lt; generate_entity(md)
end
@entities
</code></pre>

<p>  end</p>

<p>  def generate_entity(meta_data)</p>

<pre><code>entity = LightSpeedEntity.new
entity.name = meta_data[:class_name]
entity.namespace = namespace

meta_data[:fields].each do |fi|
  prop = LightSpeedProperty.new(fi)

  prop.name = entity.create_property_name_from prop.name.underscore.camelize
  entity.properties &lt;&lt; prop unless prop.primary_key?
  entity.belongs_to &lt;&lt; generate_belongs_to_relation(meta_data, fi, entity) if prop.foreign_key?

end

entity.has_many = generate_has_many_relations meta_data, entity
generate_through_associations meta_data, entity

entity
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def generate_belongs_to_relation(meta_data, field_info, entity)
  { 
    :name =&gt; entity.create_property_name_from(field_info[:name].underscore.humanize.titleize.gsub(/\s/,'')), 
    :class_name =&gt; get_belongs_to_table(meta_data[:table_name], field_info[:name]).underscore.camelize.singularize
  }
end

def generate_has_many_relations(meta_data, entity)
  hms = collect_has_many_relations meta_data[:table_name]
  hms.collect do |hm|
     hm[:name] = entity.create_property_name_from hm[:class_name].pluralize
     hm
  end

end

def generate_through_associations(meta_data, entity)
  tas = collect_through_associations(meta_data[:table_name]) 
  tas.each do |ta|
    ta[:end_tables].each do |et|
      entity.through_associations &lt;&lt; {
        :through =&gt; ta[:through_table].classify.singularize, 
        :class_name =&gt; et.camelize.singularize, 
        :name =&gt; entity.create_property_name_from(et.camelize)
      }
    end
  end
end
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
</feed>
