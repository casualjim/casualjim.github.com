<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: caricature | Ivan Porto Carrero]]></title>
  <link href="http://flanders.co.nz/categories/caricature/atom.xml" rel="self"/>
  <link href="http://flanders.co.nz/"/>
  <updated>2012-04-23T22:54:14+02:00</updated>
  <id>http://flanders.co.nz/</id>
  <author>
    <name><![CDATA[Ivan Porto Carrero]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A rant on a talk falling to pieces]]></title>
    <link href="http://flanders.co.nz/2009/07/02/a-rant-on-a-talk-falling-to-pieces/"/>
    <updated>2009-07-02T14:45:21+02:00</updated>
    <id>http://flanders.co.nz/2009/07/02/a-rant-on-a-talk-falling-to-pieces</id>
    <content type="html"><![CDATA[<p>Earlier this week I had the pleasure of doing a talk for the Belgian .NET user group. During this talk I ran in to all kinds of problems. I've done presentations where I was royally underprepared and to avoid that this time I actually started prepping for this talk on time. I was done on time, was prepared had 5 backups of my presentation and samples. What did I learn from this, if you're prepared other things will go wrong.    <br/>
I'll share the story of stuff that can go wrong.</p>

<p>Before starting the rant I have some links to share.</p>

<ul>
<li><p><a href="http://www.slideshare.net/casualjim/ruby-loves-dot-net">Slides</a></p></li>
<li><p>IronRubyMvc sample – <a href="http://irtodo.koolkraft.net/">live demo</a> – <a href="http://github.com/casualjim/ironrubymvc-sample/tree/master">source</a></p></li>
<li><p>Silverlight sample – <a href="http://samples.koolkraft.net/picture_view/">live demo</a> – <a href="http://samples.koolkraft.net/picture_view.zip">source</a></p></li>
<li><p>IronRubyMVC specs – <a href="http://github.com/casualjim/ironrubymvc/tree">source</a></p></li>
<li><p>Sinatra – <a href="http://samples.koolkraft.net/sinatra.zip">source</a></p></li>
<li><p>Metaprogramming - <a href="http://samples.koolkraft.net/metaprogramming.zip">source</a></p></li>
</ul>


<p>I have a device that I call internet on a stick, which is a vodafone usb 3G modem that I plug in to my system and it gets me on the internet (mistake 1). Since I assumed that that thing would continue to work I made most of my demos internet enabled (mistake 2). For example I have a demo where I go download pics from flickr and then show them with some animations with silverlight.    <br/>
Before my presentation I changed the fonts, opened all the files I was going to talk about ran all the demos again to make sure they would work and everything went fine.     <br/>
I unplug the USB device and go into the room to hook up the projector etc. The presentation starts and for the first hour everything went really well (from my perspective at least don't know about the people attending).     <br/>
We have a break and I plug the USB device in, at this point the vodafone program hangs (first time ever I swear). What's more I can't make it go away at all so I reboot my pc (this is still during the break).</p>

<p>Now I'm getting a little desperate because it still doesn't work. With rebooting I also lost all my carefully opened files earlier (I'm showing code in about 3 different environments and 2 different OS'es).    <br/>
So during the presentation I apologise and try to reboot once more while taking questions from the audience and hoping somebody will try to start a discussion with me. After rebooting I got a message saying my date was set to 2001 which I thought was peculiar but clicked it away. I boot vmware fusion with windows 7 (this took fairly long and is a little bit funky as the screen resolution changes a lot during this process).     <br/>
Ok so far so good, by now I've already skipped the silverlight demo promising that it will be available as a download on my blog and will be moving on to the ironrubymvc sample. To prove I do actually use visual studio at times I wanted to open my demo project in visual studio. I open visual studio only for it to tell me that my trial has expired and I can either upgrade or close the application. Oooooookay this is completely weird because i get my software through my msdn subscription and I had been using it earlier that day.</p>

<p>Moral of the story: Either go vastly underprepared and wing it. Or don't rely on the internet and always take at least 2 laptops that have identical configurations but I'm pretty sure those would or explode in my face or something will fall from the ceiling, building collapses or other mishaps.</p>

<p>Instead of having one demo go bad on me now I'm probably facing a reinstall of my mac because it lost a bunch of settings, for which I'm holding the vodafone responsible. At this moment I'm fairly certain that I should go less prepared and just wing it just out of fear for bigger disasters, people may die.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Caricature and IronRuby]]></title>
    <link href="http://flanders.co.nz/2009/05/21/getting-started-with-caricature-and-ironruby/"/>
    <updated>2009-05-21T14:52:17+02:00</updated>
    <id>http://flanders.co.nz/2009/05/21/getting-started-with-caricature-and-ironruby</id>
    <content type="html"><![CDATA[<p>IronRuby 0.5 was released yesterday. You can download it on <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25902#DownloadId=68919">codeplex</a>. This post will explain how you setup your ironruby environment to use it for testing existing CLR based assemblies. We’ll touch installing gems using rake and most importantly writing a test for a CLR based class where we’ll mock out the dependencies.</p>

<p>The first thing you need to do is download <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25902#DownloadId=68919">IronRuby</a>. After downloading you can extract it to a location on your hard drive. I extracted mine to C:\ironruby</p>

<p>Now we need to add the path to ir.exe to our PATH variable so we can use it from the command-line. And that is all there is to it to install ironruby on your machine. Now we need to get the necessary gems onto our system. We’ll need bacon and caricature.</p>

<p>Open a console and type the following:</p>

<p>igem list will show you a list of the gems you have installed on your system.</p>

<p>igem install will fetch and install a gem on your system. To install the gems we’re going to need we need to execute the command</p>

<p>igem install bacon caricature</p>

<p>That will result in the following output:</p>

<pre><code>+ C:\tools
» cmd
Microsoft Windows [Version 6.1.7100]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\tools&gt;where ir
C:\ironruby\bin\ir.exe

C:\tools&gt;exit
+ C:\tools
» igem list

*** LOCAL GEMS ***


+ C:\tools
» igem install bacon caricature
Successfully installed bacon-1.1.0
Successfully installed caricature-0.6.0
3 gems installed
Installing ri documentation for bacon-1.1.0...
Installing ri documentation for caricature-0.6.0...
Installing RDoc documentation for bacon-1.1.0...
Installing RDoc documentation for caricature-0.6.0...
</code></pre>

<p>If you would try to execute ibacon at this point that would work. We’ll need to create 2 small files to get ibacon to work. In the bin directory of ironruby I created 2 files one called ibacon and the other one is ibacon.bat</p>

<p>```ruby ibacon</p>

<h1>!C:/ironruby/bin/ir.exe</h1>

<p>#</p>

<h1>This file was generated by RubyGems.</h1>

<p>#</p>

<h1>The application 'bacon' is installed as part of a gem, and</h1>

<h1>this file is here to facilitate running it.</h1>

<p>#</p>

<p>require 'rubygems'</p>

<p>version = ">= 0"</p>

<p>if ARGV.first =~ /<sup><em>(.*)</em>$/</sup> and Gem::Version.correct? $1 then
  version = $1
  ARGV.shift
end</p>

<p>gem 'bacon', version
load 'bacon'
```</p>

<p>``` bat ibacon.bat
@ECHO OFF</p>

<p>@"ir.exe" "%~dpn0" %*
```</p>

<p>At this point you’re ready to start writing specs with bacon and caricature. Let’s look at an example I wrote for the controller factory for ironruby mvc.</p>

<p>We’re going to test the following C# code.</p>

<p>``` csharp Models.cs  <br/>
public interface IWeapon{</p>

<pre><code>int Attack(IWarrior warrior);
int Damage();
</code></pre>

<p>}</p>

<p>public interface IWarrior
{</p>

<pre><code>int Id { get; }    
string Name { get; set; }
bool IsKilledBy(IWeapon weapon);
int Attack(IWarrior target, IWeapon weapon);
int SurviveAttackWith(IWeapon weapon);
</code></pre>

<p>}</p>

<p>public class Sword : IWeapon
{</p>

<pre><code>public int Attack(IWarrior warrior){
    return warrior.SurviveAttackWith(this);
}

public int Damage(){
    return 4;
}
</code></pre>

<p>}
```</p>

<p>I generally create a bacon_helper.rb file where I group my requires and helper functions etc. In the case of this test I have the following in the bacon_helper.rb:</p>

<p>``` ruby bacon_helper.rb</p>

<h1>add some search paths to ironruby</h1>

<h1>this first one adds the path with the assemblies</h1>

<h1>this enables us not to have to specify a path to the assemblies everywhere.</h1>

<p>$: &lt;&lt; File.dirname(<strong>FILE</strong>) + "/bin"</p>

<h1>adds the path to the caricature library.</h1>

<p>$: &lt;&lt; File.dirname(<strong>FILE</strong>) + "/../lib"</p>

<h1>load the caricature library</h1>

<p>require "caricature"
require 'caricature/clr'</p>

<h1>load the bacon library</h1>

<p>require 'bacon'</p>

<h1>Add the .NET framework</h1>

<p>require 'mscorlib'</p>

<h1>load the assembly with the C# code</h1>

<p>load_assembly 'ClrModels'
```</p>

<p>At this point we’re ready to start writing the test. create a file called sword_spec.rb and we’ll add the following content to the file.</p>

<p>``` ruby swordspec.rb  <br/>
require File.dirname(<strong>FILE</strong>) + "/bacon_helper.rb"</p>

<p>describe "ClrModels::Sword" do</p>

<p>  before do</p>

<pre><code>@warrior = Caricature::Isolation.for ClrModels::IWarrior
</code></pre>

<p>  end</p>

<p>  it "should call survive_attack on the mock" do</p>

<pre><code>@warrior.when_receiving(:survive_attack_with).return(5)

sword = ClrModels::Sword.new
sword.attack(@warrior).should.equal 5

@warrior.did_receive?(:survive_attack_with).should.be.successful
</code></pre>

<p>  end</p>

<p>  it "should return different results when expectation is defined with arguments" do</p>

<pre><code>sword1 = ClrModels::Sword.new
sword2 = ClrModels::Sword.new

@warrior.when_receiving(:survive_attack_with).return(5)
@warrior.when_receiving(:survive_attack_with).with(sword2).return(15)

sword1.attack(@warrior).should.equal 5
sword2.attack(@warrior).should.equal 15

@warrior.did_receive?(:survive_attack_with).with(sword2).should.be.successful
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>So now we’ve got 2 tests for our Sword class. The only thing that is left to do is to run the specs. You can do that by executing the ibacon command and passing it the file you want to test.</p>

<pre><code>+ C:\dev\caricature
(master) » ibacon spec/sword_spec.rb
ClrModels::Sword
- should call survive_attack on the mock
- should return different results when expectation is defined with arguments

2 specifications (5 requirements), 0 failures, 0 errors
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caricature ready for beta]]></title>
    <link href="http://flanders.co.nz/2009/05/19/caricature-ready-for-beta/"/>
    <updated>2009-05-19T15:06:04+02:00</updated>
    <id>http://flanders.co.nz/2009/05/19/caricature-ready-for-beta</id>
    <content type="html"><![CDATA[<p>The last couple of days I’ve been getting <a href="http://github.com/casualjim/caricature">Caricature</a> to a more releasable state. The code got a thorough cleanup and refactor. Caricature now knows how to be a full mocking framework for Ruby classes and CLR classes that only interact with ruby objects. When I apply the 80/20 rule to caricature it’s definitely beta worthy.</p>

<p>I’m not a huge fan of the 80/20 rule unless all the features I want are in the 80 part. In that case for me it’s a 100 rule ;).</p>

<p>As for the latest changes:</p>

<p>Adding <code>require 'caricature'</code> only gives you ruby mocking. If you want to use it to mock CLR classes or interact with the CLR you’ll need to add an extra require statement:<code>require 'caricature/clr'</code>. I’ve done it this way so that I can still add Java and MacRuby support later on.</p>

<p>By default caricature will always give you an instance of an isolation, but there are times that you’ll want to substitute the result of a class method invocation. So the API got expanded with 2 methods, <code>when_class_receives</code> and <code>did_class_receive?</code> These methods enable you to setup substitutions for class method calls.</p>

<p>I’m still waiting for IronRuby 0.5 to be released to give you a blow-by-blow tutorial on how to setup your environment.</p>

<p>Basically you download the ironruby release from <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx">Codeplex</a></p>

<p>Then you make sure the path to ir.exe is in your PATH variable</p>

<p>After that you should be able to do igem list and get an empty result back.</p>

<p>now you need to install bacon you can do that by executing</p>

<p>  igem install bacon</p>

<p>next you need the caricature gem</p>

<p>  igem install caricature</p>

<p>You will also need rake to be installed to build the cs files included in the sources.</p>

<p>  igem install rake</p>

<p>ok now you should be good to to</p>

<p>``` ruby <br/>
require 'rubygems'
require 'bacon'
require 'caricature'
require 'caricature/clr'</p>

<p>describe "when isolating Ruby classes with class members" do</p>

<p>  before do</p>

<pre><code>@dagger = Dagger.new
@soldier = Caricature::Isolation.for(SoldierWithClassMembers)
</code></pre>

<p>  end</p>

<p>  it "should work without expectations" do</p>

<pre><code>result = @dagger.attack @soldier
result.should.equal nil
@soldier.did_receive?(:survive_attack_with).with(@dagger).should.be.successful 
</code></pre>

<p>  end</p>

<p>  it "should work for expectations with an argument constraint" do</p>

<pre><code>@soldier.when_receiving(:survive_attack_with).with(@dagger).return(5)
@dagger.attack(@soldier).should.equal 5
@soldier.did_receive?(:survive_attack_with).with(:any).should.be.successful
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>you can get the gem from <a href="http://rubyforge.org/projects/caricature/">rubyforge</a></p>

<p>Or from my github account: <a href="http://github.com/casualjim/caricature">http://github.com/casualjim/caricature</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An update on caricature]]></title>
    <link href="http://flanders.co.nz/2009/05/15/an-update-on-caricature/"/>
    <updated>2009-05-15T23:34:46+02:00</updated>
    <id>http://flanders.co.nz/2009/05/15/an-update-on-caricature</id>
    <content type="html"><![CDATA[<p>Yesterday I explained about caricature but I didn’t have it fully tested yet. Today I’ve written a bunch of integration specs for all the platform combinations Caricature currently supports so you should be able to use Caricature also for plain ruby object mocking in addition to CLR interop mocking.</p>

<p>After having a very brief twitter discussion with Scott I decided it would be a good idea to change the name of the methods <em>when_told_to</em> and <em>was_told_to?</em> . In ruby objects receive messages so the wording now becomes <em>when_receiving</em> and <em>did_receive? </em>. I have a problem with the should naming because there is nothing conditional about it. Either you want the method to return something or you want it to return a default value for CLR value types or nil. And if you’re asserting if a method it called that is deterministic; it is either called or not there is no gray area there.</p>

<p>```ruby  <br/>
ninja = ClrModels::Ninja.new</p>

<p>@weapon.when_receiving(:attack).with(ninja).return(5)</p>

<p>@ninja.attack(ninja, @weapon).should.equal 5</p>

<p>@weapon.did_receive?(:attack).with(:any).should.be.successful
```</p>

<p>Before I call it 1.0 I want to at least give ruby objects also the ability to isolate static and sealed methods as well as mocking ruby class methods. So that for CLR to Ruby interaction you a get the full range of possibilities.</p>

<p>I have also <a href="http://casualjim.github.com/caricature/Caricature.html">set up a site on github</a> that contains the API documentation for Caricature. When IronRuby 0.5 releases I’ll publish a blog post that will talk you through testing your CLR assembly with IronRuby, bacon and Caricature.</p>

<p>For now you can take a look <a href="http://github.com/casualjim/caricature/blob/7ab1d513be74b26c95a1ca34cc1d01f6c850cc43/spec/integration_spec.rb">here</a> for example on how to use Caricature for isolating features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IronRuby just got a mocking framework – kind of]]></title>
    <link href="http://flanders.co.nz/2009/05/14/ironruby-just-got-a-mocking-framework-kind-of/"/>
    <updated>2009-05-14T23:31:50+02:00</updated>
    <id>http://flanders.co.nz/2009/05/14/ironruby-just-got-a-mocking-framework-kind-of</id>
    <content type="html"><![CDATA[<p>As I mentioned in a previous <a href="http://flanders.co.nz/2009/05/03/mocking-for-ironruby/">post</a>. I started working on a small mocking framework. It has now progressed far enough to handle the most common mocking tasks.</p>

<p>Below I pasted the output of the integration tests for CLR interop.</p>

<pre><code>when isolating CLR interfaces        
- should work without expectations         
- should work with an expectation with any arguments         
- should work with an expectation getting different method call result         
- should work for an assertion on a specific argument 

when isolating CLR classes        
- should work without expectations         
- should work with an expectation for any arguments         
- should work with an assertion for specific arguments         
- should fail for an assertion with wrong arguments 

when isolating CLR instances        
- should work without expectations         
- should work with an expectation for any arguments         
- should fail for an assertion for specific arguments         
- should allow to delegate the method call to the real instance (partial mock)
</code></pre>

<p>you will need bacon installed to run the specs:</p>

<p>  igem install bacon</p>

<p>you can then install the caricature gem in ironruby by issueing</p>

<p>  igem install caricature</p>

<p>To use it there are some examples in the file spec/integration_spec.rb</p>

<p>```ruby spec/integration_spec.rb
require 'rubygems'
require 'bacon'
require 'caricature'</p>

<p>ninja.when_told_to(:survive_attack_with).return(5)</p>

<p>weapon.attack(ninja).should.equal 5</p>

<p>ninja.was_told_to?(:survive_attack_with).with(:any).should.be.successful
```</p>

<p>There is a gotcha though, when you use it in a CLR class you're bound to CLR rules and it only overrides the methods that are marked as virtual. We also can't isolate static or sealed types at the moment.</p>

<p>I took the approach of doing away with the terminology of mocking and subbing and instead chose the much clearer Isolation. By default any method returns null or the default value of a value type. You can tell an isolation to return a specific value or raise an error etc. Later on you can then assert if the method was actually called.</p>

<p>This fits in better with the way you probably structure your tests.</p>

<p>I hope you like it.</p>

<p>You can find the source in my github account.</p>

<p><a href="http://github.com/casualjim/caricature">http://github.com/casualjim/caricature</a></p>
]]></content>
  </entry>
  
</feed>
