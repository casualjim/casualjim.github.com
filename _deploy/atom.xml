<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ivan Porto Carrero]]></title>
  <link href="http://flanders.co.nz/atom.xml" rel="self"/>
  <link href="http://flanders.co.nz/"/>
  <updated>2012-04-23T22:54:14+02:00</updated>
  <id>http://flanders.co.nz/</id>
  <author>
    <name><![CDATA[Ivan Porto Carrero]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[work for backchat]]></title>
    <link href="http://flanders.co.nz/2011/08/01/backchat-developers/"/>
    <updated>2011-08-01T20:57:20+02:00</updated>
    <id>http://flanders.co.nz/2011/08/01/backchat-developers</id>
    <content type="html"><![CDATA[<h1>Backchat.IO is hiring!</h1>

<p>BackChat.io is easiest to describe as <em>grep for real-time data</em>. We’re busy developing a platform that makes sense of the data you send it (in real-time).</p>

<p>For the social web that means that you can start following certain users on a network or define a search term and you get those in a unified activity streams format.</p>

<p>But for something more arcane, like say, log data, that means you can send it lines of text and have it extract out fields on which you can define filters. All of this happens in real-time and changes are reflected virtually immediately in open connections.</p>

<!-- more -->


<p>Our system is designed to allow for easy definition of data sources. Sources that currently feed into our system are <a href="http://twitter.com">Twitter</a>, <a href="http://facebook.com">Facebook</a>, <a href="http://linkedin.com">LinkedIn</a>, SMTP, RSS, ATOM, PubSubHubbub, and more. By next year we hope to provide dozens, if not 100’s, of API implementations.</p>

<p>In the longer term we hope to provide more intelligent stuff like real-time reporting by allowing you to define aggregates like SUM, enhance data with secondary information, and many more crazy ideas. We’re aiming to build our system exclusively on existing standards described in RFC’s or the activity streams spec. However not everything we do is described in standards and that’s where we’ll try to extend an existing standard.
Our use cases are wide, ranging from niche collaboration or social media apps, to communication/PR/marketing agencies, to telecommunications… We operate at an abstraction on a much lower level than most similar services; so many tools you see and use on the web today can be built with only a few lines of code in your favourite language on our platform.</p>

<p>The entire system is built on dogfooding and practicing what we preach. So where it makes sense we rely on our own service, like with log processing. Our entire website is built using the API methods we expose to our customers. Our API integration language will be shared with our customers too.</p>

<h2>How do you guys work?</h2>

<p>We use a mix of technologies like <a href="http://www.scala-lang.org/">scala</a>, <a href="http://akka.iio">akka</a>, <a href="http://mongodb.org">mongodb</a>, <a href="http://lucene.apache.org">lucene</a>, <a href="http://www.zeromq.org/">zeromq</a>, <a href="http://dropbox.com">dropbox</a>, <a href="http://flowdock.com">flowdock</a>, <a href="http://skype.com">skype</a>, …. We apply agile principles to our development process, but this doesn’t mean we follow a doctrine that is being sold because some consultant wants to make some money. To us Agile development means: design for change. Which also means that the process we use is adapted to the people in the process and not vice versa. It’s about being productive and creating an environment where you want to work.
At the moment, all of us work from home. We’re a team of 3, looking for a fourth team-member to start in September. We don’t care where or how you work, just that you deliver 40 hours worth of output, regular github pushes (so new code can be reviewed before it hits our integration branch) and, most importantly, passion!</p>

<h2>Great! What are you guys looking for?</h2>

<p>We’re looking for a passionate developer. This person ideally:</p>

<ul>
<li><p>knows about concurrent and distributed programming</p></li>
<li><p>is well-versed in Scala</p></li>
<li><p>can accept a team decision, and understands that communication is the most important part of development as a team.</p></li>
<li><p>is polyglot (the ability to work with C#, node.js/javascript, ruby, python and/or php)</p></li>
<li><p>preferably knows XMPP beyond using the smack library</p></li>
<li><p>has used mongodb</p></li>
<li><p>knows Lucene</p></li>
<li><p>regular expressions have little or no secrets for you</p></li>
<li><p>does not believe in sugar-coating things and voices reservations early</p></li>
<li><p>No! Try not. Do, or do not. There is no try. (Some of us hope you’re a Star Wars fan too)</p></li>
</ul>


<p>It’s a plus if you’ve done some of the following:</p>

<ul>
<li><p>BIG data</p></li>
<li><p>Language parsing and development</p></li>
<li><p>Natural language processing</p></li>
<li><p>Statistics</p></li>
<li><p>knows how to express himself in simple english and not academic language</p></li>
<li><p>Netty server development / Java NIO</p></li>
<li><p>Jetty customization</p></li>
<li><p>Understands the problems communication agencies and social-media developers face</p></li>
</ul>


<p>What we’re not looking for is someone who has little or no experience, community zealots and big framework lovers (I’m looking at you rails, lift, spring, …). We need doers!</p>

<p>You do not have to live in the UK to work with/for us. We are firm believers in smarter remote-working, and our cloud-based infrastructure is designed to allow us to work from where we want.</p>

<h2>Open-Source?</h2>

<p>We use a lot of open source, and we believe in being good citizens and contribute back where we can. Some of the projects we use: <a href="http://api.mongodb.org/scala/casbah/current/">casbah</a>, <a href="http://akka.io/">akka</a>, <a href="https://github.com/scalatra/scalatra">scalatra</a>, lift-mongodb-record, lift-json, codahale metrics, databinder dispatch, …
So far most of our contributions were to scalatra and peripheral to akka. If we come up with stuff that we all agree on should really be in an open source project then we will actually take the necessary steps to make that happen.</p>

<p>Any open-source library we produce is licensed as MIT and uses as few dependencies as possible (be nice to people with complicated projects).</p>

<h2>What’s the vision?</h2>

<p>To build the best damned developer platform for social-media and real-time data! Quickly!</p>

<p>Our service is primarily aimed at developers. We provide a metered, utility billing model. Depending on which bits and pieces of our infrastructure a developer uses we calculate a price per message for each incoming channel. At the end of the month they get a bill. This billing is updated in real-time so everybody knows exactly where they stand.
For corporate customers we provide a behind-firewall-install license. This license fee may or may not include bespoke development or integration into their systems.</p>

<p>Our founding customer has been O2/Telefonica. They’re using our platform in cool ways, but we can’t talk about that just yet (ssshh).</p>

<h2>Who are the company?</h2>

<p>Adam Burmister is the CEO of the company and has previously worked as team lead for the bbc.com homepage. He has also done assorted javascript libraries and was nominated for a webby award for his work at xero.com. He’s a Kiwi, so be warned, he sounds funny.</p>

<p>Ivan Porto Carrero is the CTO and has previously almost published a book on IronRuby and has been an MVP for the last 2 years. Worked as an architect/consultant in the .NET sphere and met Adam while he was working as a senior development at xero.com It helps to know that Ivan is from Belgium, as an extremely low bullshit tolerance and it’s best to feed him at regular times with pre-approved snacks. Also, his english sounds funny.</p>

<p>Stefan De Boey was our very first helper and we haven’t managed to scare him off, he’s actually happy with his job, but won’t say so because he’s Belgian and compliments make people suspicious where he’s from (not to mention the thought of making a government).
Stefan typically starts his day between 11am and 12:30 and finishes around 20:00.
Also, his english sounds funny.</p>

<h2>Ok, I’m sold. How do I apply?</h2>

<p>Great! We’re looking forward to meeting you.</p>

<p>If you could, please start by sending us your LinkedIn profile and preferably some recent open source projects you worked on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Radical language and platform shift]]></title>
    <link href="http://flanders.co.nz/2010/09/30/radical-language-and-platform-shift/"/>
    <updated>2010-09-30T02:42:12+02:00</updated>
    <id>http://flanders.co.nz/2010/09/30/radical-language-and-platform-shift</id>
    <content type="html"><![CDATA[<p>I realize it&#8217;s been a really long time since I put something on this blog. And for those of you expecting more (iron)ruby posts I&#8217;m going to have to dissapoint you. This is mostly a braindump of what I&#8217;ve been working out the last months.</p>

<p>A few months ago Adam Burmister, who I met at  <a href="http://www.xero.com">Xero</a>, and I got incubated by <a href="http://o2.co.uk">O2</a> to do a project that allowed me to push the boundaries and it required me to look outside what I already knew.  I had to go look for a new way of approaching problems, it isn&#8217;t said that the problems couldn&#8217;t be solved with a language like C# or Ruby. The solution would have been pretty much sub-par. In this quest for the best way to approach that problem it turned out that <a href="http://scala-lang.org">Scala</a> was the language that hit a sweet spot for me.</p>

<p>We needed something that resembled Erlang; and while I did my best to really get into <a href="http://www.erlang.org/">Erlang</a> I never could (this could possibly be because of the eye bleeds because the language is just so friggin&#8217; ugly). So it turns out there is a design pattern called <a href="http://en.wikipedia.org/wiki/Active_object">ActiveObject</a> which is at the core the same as an erlang node (it&#8217;s not I know a node has many other properties).   We also needed to be able to process humongous volumes of data (Terrabytes worth) at this point Ruby is out of the picture. I&#8217;m sure I will upset many fanboys but face it ruby is slooooooooooooooow and advances slow, by the time you can properly program distributed systems in ruby the way I had in mind I&#8217;ll be a great grand dad and have a long and pointy grey beard. .Net is lacking libraries and the ruby libraries often are good enough, but <a href="http://www.startuplessonslearned.com/2010/09/good-enough-never-is-or-is-it.html">good enough never is</a>. And since I got tired of patching every single bloody library I touched I vowed to steer clear of ruby. We still use ruby but we use it for what it&#8217;s great at: system automation scripts and sometimes quick prototyping.</p>

<p>We basically needed hadoop, hadoop is a java project (I&#8217;ll return to why not java and C# a little bit later). So once I entered the Java domain a new world opened up for me (old for most other people I realise that). Java has what can only be described as a SHITLOAD of great quality libraries. It&#8217;s just a pithy that Java like C# suffers from what I call programmer masturbation. I&#8217;ve certainly been guilty of that and during my time at Xero they suffered the grunt of it (sorry guys). So lets return to those problems.</p>

<p>You read a book, nicknamed Gang of Four which then becomes &#8220;the bible&#8221;, it has this thing called design patterns and they need to be applied where ever you can.  I&#8217;ll let you in on a little secret: They do next to nothing to make your code more maintainable (quite the opposite in fact) and definitely don&#8217;t make it more understandable unless the next guy also knows &#8220;the bible&#8221;. If he doesn&#8217;t he&#8217;s a fucking retard, everybody knows those design patterns.  The thing that doesn&#8217;t jive is: how is writing more code making your code more maintainable as you have to maintain more code (did I mention more code in this sentence?)The one thing ubiquitous use of design patterns from &#8220;the bible&#8221; does do is give you some job security. Pythonista&#8217;s <a href="http://us.pycon.org/2009/conference/schedule/event/51/">shun design patterns</a> and if not you should apparently.  Having programmed in many languages I tend to agree with the conclusion that having to use crutches like design patterns (I should really make this into a factory or manager of some sort) actually means your language is flawed.</p>

<p>I still need to meet the person that can actually prove to me that your code is more maintainable than code that follows the following simple rules:
* Don&#8217;t Repeat Yourself
* Don&#8217;t write what you don&#8217;t need right now
* write a couple of tests
*  Generalize as if there was no tomorrow.
* Write as little and as simple code as humanly possible (this kills double dispatch and the visitor pattern)
* Remember that you (as do I) have a bird brain, you will have forgotten what you did 2 weeks ago, let alone 6 months from now, so it needs to be understandable by the biggest idiot on the planet, namely the author of the code (in my case me).</p>

<p>I don&#8217;t want to write a post on why I left .NET but it&#8217;s inevitable to mention it. I used to think .NET was the greatest thing since sliced bread and I still think it&#8217;s a really cool piece of technology. However there is only a small minority of .NET programmers I actually get along with so some of the remarks I&#8217;m going to make are not directed at those people. I have felt unhappy about the way .NET was evolving around the same time microsoft introduced the class designer tool. Don&#8217;t even get me started on people advocating UML because that belongs in the same classification, a vertical one. Once Oslo got introduced or is it M I wanted to get out as quickly as possible. I happen to like writing code, if I wanted to drag and drop boxes and connect them with fancy lines I would have gone for a designer career.</p>

<p>.NET also suffers from another problem, whatever the all-knowing company produces is innovation created by them (never mind if some of those things have been around for more than 20 years). And most developers on .NET suffer from that phenomenon that can only be called Stockholm Syndrome. It is mind boggling to me that you want to use tools you know suck, they don&#8217;t make you do a better job faster in fact once you move past the hello world example they fall apart really quickly, not to mention having to debug a problem and submitting a bug (which will then be bounced back as by design).</p>

<p>Enough slamming on .NET let&#8217;s return to Java. Stephen Colebourne goes the next <a href="http://www.jroller.com/scolebourne/entry/the_next_big_jvm_language1">big JVM language is Java</a>, but this time done right??? One of his arguments is 10.000.000 programmers world wide can&#8217;t be wrong. I happen to think that 9,9 million of those programmers mostly likes to get paid, it has little or nothing to do with the fact that it&#8217;s a great or not great language.  It&#8217;s certainly easier than C and definitely C++, ask <a href="http://artlung.com/smorgasborg/Invention_of_Cplusplus.shtml">Bjarne</a>. Most of the java code I read makes me sick to my stomach the boilerplate needed   (the next example is in C# the java one would most def be longer:  <a href="http://code.google.com/p/fizzbuzz/source/browse/#svn/trunk/trunk">fizzbuzz enterprise edition</a>) is atrocious. Java date arithmetic (I know about joda-time) is an absolute nightmare. The fact that you need to write at least 6 (not counting import statements and the main definition) lines of code to be able to read input from the keyboard and  print it out just amplify my point.</p>

<p>So no ruby, no .NET no java what&#8217;s next. There is this cool thing people keep talking about: node.js it&#8217;s crazy fast (if you compare it with languages like ruby and run the correct hello world benchmarks). however the libraries are subpar at best and generally feel like they&#8217;ve been written by very young programmers (with the odd exception of course) who have little or no clue about what&#8217;s going on outside of their blog or what their &#8220;gods&#8221; are saying. I&#8217;m sure it has a place and I&#8217;ve given it more than an honest chance but at the end of the day it would have required a big investment to write all kinds of things that just aren&#8217;t there (yet).</p>

<p>But you know it&#8217;s event driven and asynchronous and that&#8217;s why it&#8217;s fast and only non-blocking IO is the right way to go because using blocking IO is slow. Ok now you got me, you&#8217;re right but also wrong. It depends on your use case and how you work with blocking IO. We&#8217;ve come to go by this simple rule: if you need many short-lived connections (like in say HTTP) then non blocking io is indeed better, however long lasting connections may benefit from blocking IO, because the throughput is a lot higher (although it&#8217;s not quite as black and white as that).</p>

<p>So back to we want erlang but without the bleeding eyes: enter scala + <a href="http://www.akkasource.org">akka</a>. Boy was I happy camper when I started reading their docs. An open-source project, written in this language called scala that solves the same problems as Erlang only this language is beautiful, yes I&#8217;ll repeat that beauuuutifuuuulll. Scala gives me what ruby was never able to give me, a fast, pretty language that supports multiple paradigms with a strong nudge towards functional programming. it can be run on .NET as well as on the JVM meaning we didn&#8217;t have to forego the much needed libraries. And the libraries that are available are in a totally different league than those dinky toys node.js and ruby have to offer. It&#8217;s like comparing the majors to the minors I guess.</p>

<p>The downside is that we do need core i7 machines to get any decent compile times out of the thing and IDE support (while it gets better steadily) is still behind on other languages. If you&#8217;re wondering about LOC count vs ruby I think they&#8217;re about even once you know what you&#8217;re doing. Scala is not an easy language but it&#8217;s heaps of fun to work with and I&#8217;m glad I get to use it the next couple of years.  if you&#8217;re looking for an acceptable alternative on .NET that is supported by the all-knowing hugely innovative company you should look at F#.</p>

<p>As an aside the next time somebody mentions enterprise ready as baked in to me; they will get a rope, chair and nail it&#8217;s quicker and less painful.</p>

<p>There the rant is over, I feel a lot better now. I already know I&#8217;m an idiot so tell me something new.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video of FOSDEM IronRuby presentation]]></title>
    <link href="http://flanders.co.nz/2010/03/12/video-of-fosdem-ironruby-presentation/"/>
    <updated>2010-03-12T13:24:55+01:00</updated>
    <id>http://flanders.co.nz/2010/03/12/video-of-fosdem-ironruby-presentation</id>
    <content type="html"><![CDATA[<p>At FOSDEM 2010 I got the chance to talk in the mono dev room about ironruby.</p>

<p>In this talk I extended the banshee application to work with IronRuby based plugins.</p>

<p>So without further ado here&#8217;s the link:
<a href="http://andrius.six.lt/~bentkus/videos/mono-fosdem2010/mono-2010-02-07-1000-1100-(Ivan%20Porto%20Carrero">IronRuby: The .NET and Ruby love child</a>-(The%20Ruby%20and%20the%20.NET%20lovechild).mp4)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a console to your IronRuby application]]></title>
    <link href="http://flanders.co.nz/2009/12/01/adding-a-console-to-your-ironruby-application/"/>
    <updated>2009-12-01T11:00:44+01:00</updated>
    <id>http://flanders.co.nz/2009/12/01/adding-a-console-to-your-ironruby-application</id>
    <content type="html"><![CDATA[<p>When building an application it might be very handy to have a REPL console that knows about the libraries of your application, but you don’t necessarily want to start your application to interact with it. In Rails they have a script/console command. Here’s how you create one that knows about ironruby. The example I’m going to use is taken from an IronRubyMVC application.</p>

<p>I started out by creating a folder script.</p>

<p>Then I created a file called console (on a unix system I would chmod +x this file). I also like to have completion in my console so I’ve added the irb/completion library. Then I’ll require the routes.rb file so that the libraries of my application get loaded.</p>

<figure class='code'><figcaption><span>console script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env ir</span>
</span><span class='line'><span class="c"># File: script/console</span>
</span><span class='line'><span class="nv">irb</span> <span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;OS&#39;</span><span class="o">]</span> <span class="o">=</span>~ /^Windows/iu ? <span class="s1">&#39;CALL iirb.bat&#39;</span> : <span class="s1">&#39;iirb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">libs</span> <span class="o">=</span>  <span class="s2">&quot; -r irb/completion&quot;</span>
</span><span class='line'><span class="c"># Perhaps use a console_lib to store any extra methods I may want available in the console</span>
</span><span class='line'>libs &lt;&lt;  <span class="s2">&quot; -r #{File.dirname(__FILE__) + &#39;/../routes&#39;}&quot;</span>
</span><span class='line'>puts <span class="s2">&quot;Loading Poll chat&quot;</span>
</span><span class='line'><span class="nb">exec</span> <span class="s2">&quot;#{irb} #{libs} --simple-prompt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The 3rd line has CALL iirb.bat as a command on a windows system. The CALL command is needed for the next step because we’re going to execute a batch file from another batch file on windows. Otherwise it wouldn’t work for me. CALL is very similar to exec in ruby and gives control to another executable until its task is done.</p>

<p>For windows to be able to use script/console (script\console) instead of ir script/console you also need to create a batch file called console.bat in the script folder.</p>

<figure class='code'><figcaption><span>console script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">ECHO</span> <span class="k">OFF</span>
</span><span class='line'><span class="k">IF</span> NOT <span class="s2">&quot;%~f0&quot;</span> <span class="o">==</span> <span class="s2">&quot;~f0&quot;</span> <span class="k">GOTO</span> <span class="nl">:WinNT</span>
</span><span class='line'><span class="p">@</span><span class="s2">&quot;ir.exe&quot;</span> <span class="s2">&quot;script/console&quot;</span> <span class="nv">%1</span> <span class="nv">%2</span> <span class="nv">%3</span> <span class="nv">%4</span> <span class="nv">%5</span> <span class="nv">%6</span> <span class="nv">%7</span> <span class="nv">%8</span> <span class="nv">%9</span>
</span><span class='line'><span class="k">GOTO</span> <span class="nl">:EOF</span>
</span><span class='line'><span class="nl">:WinNT</span>
</span><span class='line'><span class="p">@</span><span class="s2">&quot;ir.exe&quot;</span> <span class="s2">&quot;%~dpn0&quot;</span> %*
</span></code></pre></td></tr></table></div></figure>


<p>This is all there is to it to get rails like scripting abilities.</p>

<p>IronRuby has another really cool feature built into IronRuby is the ability to provide REPL’s for your application at run-time. All you need to do is use Repl.new and give it an output and input stream.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A good url regular expression? (repost)]]></title>
    <link href="http://flanders.co.nz/2009/11/08/a-good-url-regular-expression-repost/"/>
    <updated>2009-11-08T12:02:37+01:00</updated>
    <id>http://flanders.co.nz/2009/11/08/a-good-url-regular-expression-repost</id>
    <content type="html"><![CDATA[<p>I&#8217;m moving this post from <a href="http://geekswithblogs.net/casualjim/archive/2005/12/01/61722.aspx">http://geekswithblogs.net/casualjim/archive/2005/12/01/61722.aspx</a></p>

<p>I started out blogging on geeks with blogs but I can&#8217;t allow comments there anymore or I get too much spam, so I&#8217;m moving the post from there to this place.  Various people have contributed through the comments in the other blog post. So here I have better control over the spam and can open the comments again.</p>

<p>I have been looking for a good first layer of validating an url to see if it is valid.</p>

<p>For checking the format of the url it seems to me to be the most logical approach to use regular expressions. Up until now I always discarded them as being to “geeky”, meaning i don&#8217;t consider it my life&#8217;s biggest goal to be typing (/?[]\w) all day long (so why did i become a programmer, aaaah yes to make life easier for other people)</p>

<p>Anyway.. to find a good regular expression to that validates urls not url domains. One that doesn&#8217;t allow spaces in the domainname and where the domain can be suffixed with the port number.  Also I need support for the ~/ paths</p>

<p>This is what I came up with.. if somebody as a better idea&#8230; or finds a mistake please let me know.. Always happy to learn something new.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">^(((</span><span class="n">ht</span><span class="p">|</span><span class="n">f</span><span class="p">)</span><span class="n">tps</span><span class="p">?</span><span class="err">\</span><span class="p">:</span><span class="err">\</span><span class="p">/</span><span class="err">\</span><span class="p">/)|~/|/)?([</span><span class="n">a</span><span class="p">-</span><span class="n">zA</span><span class="p">-</span><span class="n">Z</span><span class="p">]{</span><span class="m">1</span><span class="p">}([</span><span class="err">\</span><span class="n">w</span><span class="err">\</span><span class="p">-]+</span><span class="err">\</span><span class="p">.)+([</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">})(:[</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">})?)/?(</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">\</span><span class="p">.[</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">})?((</span><span class="err">\</span><span class="p">?</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)?(&amp;</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)*)?</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was a bit quickly in using this regex. Simeon pilgrim indicated that the ftp urls won&#8217;t validate when you add a username and a password.</p>

<p>I don&#8217;t really need to validate ftp so I should have removed the ftp protocol from the list of choices.  I need this just to validate urls for weblinks and the link element in an rss feed.  When I need them for ftp I will post the ftp version.. but for now I don&#8217;t have time to spend on elaborating the regex.</p>

<p>Anyway here is the right one :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">^(</span><span class="n">http</span><span class="p">(</span><span class="n">s</span><span class="p">?)</span><span class="err">\</span><span class="p">:</span><span class="err">\</span><span class="p">/</span><span class="err">\</span><span class="p">/|~/|/)?([</span><span class="n">a</span><span class="p">-</span><span class="n">zA</span><span class="p">-</span><span class="n">Z</span><span class="p">]{</span><span class="m">1</span><span class="p">}([</span><span class="err">\</span><span class="n">w</span><span class="err">\</span><span class="p">-]+</span><span class="err">\</span><span class="p">.)+([</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">}))(:[</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">})?/?(</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">\</span><span class="p">.[</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">})?((</span><span class="err">\</span><span class="p">?</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)?(&amp;</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)*)?</span>
</span></code></pre></td></tr></table></div></figure>


<p>A full url validation would include resolving names through dns or making a webrequest to the provided url to see if we get a 200 response. The only way to be sure is to test if it is there in my opinion.</p>

<p>Thanks Simeon.</p>

<p>And for those who really want the ftp validation :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">^((</span><span class="n">ht</span><span class="p">|</span><span class="n">f</span><span class="p">)</span><span class="n">tp</span><span class="p">(</span><span class="n">s</span><span class="p">?)</span><span class="err">\</span><span class="p">:</span><span class="err">\</span><span class="p">/</span><span class="err">\</span><span class="p">/|~/|/)?([</span><span class="err">\</span><span class="n">w</span><span class="p">]+:</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">@</span><span class="p">)?([</span><span class="n">a</span><span class="p">-</span><span class="n">zA</span><span class="p">-</span><span class="n">Z</span><span class="p">]{</span><span class="m">1</span><span class="p">}([</span><span class="err">\</span><span class="n">w</span><span class="err">\</span><span class="p">-]+</span><span class="err">\</span><span class="p">.)+([</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">}))(:[</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">})?/?(</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">\</span><span class="p">.[</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">})?((</span><span class="err">\</span><span class="p">?</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)?(&amp;</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)*)?</span>
</span></code></pre></td></tr></table></div></figure>


<p>I am not sure about numbers in the username but I believe you can have a username of numbers alone.</p>

<p>Comments don&#8217;t seem to work on this blog engine.. so just send me a mail through the contact form. thanks</p>

<p>Two days later &#8230;</p>

<p>I discovered there is still a problem with my regular expressions&#8230; folders don&#8217;t get parsed.</p>

<p>I&#8217;ve solved the path issue, so now it should be finding all url&#8217;s</p>

<p>Expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">^((</span><span class="n">ht</span><span class="p">|</span><span class="n">f</span><span class="p">)</span><span class="n">tp</span><span class="p">(</span><span class="n">s</span><span class="p">?)</span><span class="err">\</span><span class="p">:</span><span class="err">\</span><span class="p">/</span><span class="err">\</span><span class="p">/|~/|/)?([</span><span class="err">\</span><span class="n">w</span><span class="p">]+:</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">@</span><span class="p">)?([</span><span class="n">a</span><span class="p">-</span><span class="n">zA</span><span class="p">-</span><span class="n">Z</span><span class="p">]{</span><span class="m">1</span><span class="p">}([</span><span class="err">\</span><span class="n">w</span><span class="err">\</span><span class="p">-]+</span><span class="err">\</span><span class="p">.)+([</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">2</span><span class="p">,</span><span class="m">5</span><span class="p">}))(:[</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">})?((/?</span><span class="err">\</span><span class="n">w</span><span class="p">+/)+|/?)(</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">\</span><span class="p">.[</span><span class="err">\</span><span class="n">w</span><span class="p">]{</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">})?((</span><span class="err">\</span><span class="p">?</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)?(&amp;</span><span class="err">\</span><span class="n">w</span><span class="p">+=</span><span class="err">\</span><span class="n">w</span><span class="p">+)*)?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Should parse the url below</p>

<p><a href="http://hh-1hallo.msn.blabla.com:80800/test/test/test.aspx?dd=dd&amp;id=dki">http://hh-1hallo.msn.blabla.com:80800/test/test/test.aspx?dd=dd&amp;id=dki</a></p>

<p>But not :</p>

<p><a href="http://hh-1hallo">http://hh-1hallo</a>. msn.blablabla.com:80800/test/test.aspx?dd=dd&amp;id=dki</p>

<p>Update 29/11/2008:</p>

<p>Joe posted what seems to be a great regular expression in the comments</p>

<p>he tested it with the following urls:</p>

<p>http://www.google.com/search?q=good+url+regex&amp;rls=com.microsoft:*&amp;ie=UTF-8&amp;oe=UTF-8&amp;startIndex=&amp;startPage=1</p>

<p>ftp://joe:password@ftp.filetransferprotocal.com</p>

<p>google.ru</p>

<p>https://some-url.com?query=&amp;name=joe?filter=<em>.</em>#some_anchor</p>

<p>Expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">^(?</span><span class="err">#</span><span class="n">Protocol</span><span class="p">)(?:(?:</span><span class="n">ht</span><span class="p">|</span><span class="n">f</span><span class="p">)</span><span class="n">tp</span><span class="p">(?:</span><span class="n">s</span><span class="p">?)</span><span class="err">\</span><span class="p">:</span><span class="err">\</span><span class="p">/</span><span class="err">\</span><span class="p">/|~/|/)?(?</span><span class="err">#</span><span class="n">Username</span><span class="p">:</span><span class="n">Password</span><span class="p">)(?:</span><span class="err">\</span><span class="n">w</span><span class="p">+:</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">@</span><span class="p">)?(?</span><span class="err">#</span><span class="n">Subdomains</span><span class="p">)(?:(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">]+</span><span class="err">\</span><span class="p">.)+(?</span><span class="err">#</span><span class="n">TopLevel</span> <span class="n">Domains</span><span class="p">)(?:</span><span class="n">com</span><span class="p">|</span><span class="n">org</span><span class="p">|</span><span class="n">net</span><span class="p">|</span><span class="n">gov</span><span class="p">|</span><span class="n">mil</span><span class="p">|</span><span class="n">biz</span><span class="p">|</span><span class="n">info</span><span class="p">|</span><span class="n">mobi</span><span class="p">|</span><span class="n">name</span><span class="p">|</span><span class="n">aero</span><span class="p">|</span><span class="n">jobs</span><span class="p">|</span><span class="n">museum</span><span class="p">|</span><span class="n">travel</span><span class="p">|[</span><span class="n">a</span><span class="p">-</span><span class="n">z</span><span class="p">]{</span><span class="m">2</span><span class="p">}))(?</span><span class="err">#</span><span class="n">Port</span><span class="p">)(?::[</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">})?(?</span><span class="err">#</span><span class="n">Directories</span><span class="p">)(?:(?:(?:/(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})+)+|/)+|</span><span class="err">\</span><span class="p">?|</span><span class="err">#</span><span class="p">)?(?</span><span class="err">#</span><span class="n">Query</span><span class="p">)(?:(?:</span><span class="err">\</span><span class="p">?(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">{</span><span class="m">2</span><span class="p">}])+=(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})*)(?:&amp;(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">{</span><span class="m">2</span><span class="p">}])+=(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})*)*)*(?</span><span class="err">#</span><span class="n">Anchor</span><span class="p">)(?:</span><span class="err">#</span><span class="p">(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})*)?</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update 8/11/2009:</p>

<p>Expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">^(?</span><span class="err">#</span><span class="n">Protocol</span><span class="p">)(?:(?:</span><span class="n">ht</span><span class="p">|</span><span class="n">f</span><span class="p">)</span><span class="n">tp</span><span class="p">(?:</span><span class="n">s</span><span class="p">?)</span><span class="err">\</span><span class="p">:</span><span class="err">\</span><span class="p">/</span><span class="err">\</span><span class="p">/|~</span><span class="err">\</span><span class="p">/|</span><span class="err">\</span><span class="p">/)?(?</span><span class="err">#</span><span class="n">Username</span><span class="p">:</span><span class="n">Password</span><span class="p">)(?:</span><span class="err">\</span><span class="n">w</span><span class="p">+:</span><span class="err">\</span><span class="n">w</span><span class="p">+</span><span class="err">@</span><span class="p">)?(?</span><span class="err">#</span><span class="n">Subdomains</span><span class="p">)(?:(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">]+</span><span class="err">\</span><span class="p">.)+(?</span><span class="err">#</span><span class="n">TopLevel</span> <span class="n">Domains</span><span class="p">)(?:</span><span class="n">com</span><span class="p">|</span><span class="n">org</span><span class="p">|</span><span class="n">net</span><span class="p">|</span><span class="n">gov</span><span class="p">|</span><span class="n">mil</span><span class="p">|</span><span class="n">biz</span><span class="p">|</span><span class="n">info</span><span class="p">|</span><span class="n">mobi</span><span class="p">|</span><span class="n">name</span><span class="p">|</span><span class="n">aero</span><span class="p">|</span><span class="n">jobs</span><span class="p">|</span><span class="n">museum</span><span class="p">|</span><span class="n">travel</span><span class="p">|[</span><span class="n">a</span><span class="p">-</span><span class="n">z</span><span class="p">]{</span><span class="m">2</span><span class="p">}))(?</span><span class="err">#</span><span class="n">Port</span><span class="p">)(?::[</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">1</span><span class="p">,</span><span class="m">5</span><span class="p">})?(?</span><span class="err">#</span><span class="n">Directories</span><span class="p">)(?:(?:(?:</span><span class="err">\</span><span class="p">/(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})+)+|</span><span class="err">\</span><span class="p">/)+|</span><span class="err">\</span><span class="p">?|</span><span class="err">#</span><span class="p">)?(?</span><span class="err">#</span><span class="n">Query</span><span class="p">)(?:(?:</span><span class="err">\</span><span class="p">?(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">{</span><span class="m">2</span><span class="p">}])+=?(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})*)(?:&amp;(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">{</span><span class="m">2</span><span class="p">}])+=?(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})*)*)*(?</span><span class="err">#</span><span class="n">Anchor</span><span class="p">)(?:</span><span class="err">#</span><span class="p">(?:[-</span><span class="err">\</span><span class="n">w</span><span class="p">~!</span><span class="err">$</span><span class="p">+|.,*:=]|%[</span><span class="n">a</span><span class="p">-</span><span class="n">f</span><span class="err">\</span><span class="n">d</span><span class="p">]{</span><span class="m">2</span><span class="p">})*)?</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a wave for this regex:</p>

<p><a href="https://wave.google.com/wave/?pli=1#restored:wave:googlewave.com!w%252BsFbGJUukA">https://wave.google.com/wave/?pli=1#restored:wave:googlewave.com!w%252BsFbGJUukA</a></p>

<p>Update 29/09/2010</p>

<p>So people if you don&#8217;t like it don&#8217;t use it.
Now this regex is troubled it has a bunch of issues but it works most of the time.  If you want a more liberal regular expression to just capture urls from text, there is a really good one on the blog of John Gruber.
<a href="http://daringfireball.net/2010/07/improved_regex_for_matching_urls">Improved regex for matching urls @ daring fireball</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating launcher scripts for IronRuby]]></title>
    <link href="http://flanders.co.nz/2009/10/26/creating-launcher-scripts-for-ironruby/"/>
    <updated>2009-10-26T14:16:48+01:00</updated>
    <id>http://flanders.co.nz/2009/10/26/creating-launcher-scripts-for-ironruby</id>
    <content type="html"><![CDATA[<p>It’s been a while since I blogged, I’ve been terribly busy going through some changes and prepping the book.</p>

<p>Anyway lately a lot of blog posts have been written on how to ironruby with cucumber to test your .NET code. While I think it’s great people are using ironruby and cucumber, the guide you can find on aslak’s github wiki isn’t the most ideal solution as it will only work for windows and it requires MRI to be installed on your system. So I thought I’d write up how I’ve been creating launchers that work both on windows .NET and mono systems.</p>

<p>Another problem the approach of setting the GEM_PATH to the MRI gem location is that if your gem requires a C-extension (which could easily be a C# extension in IronRuby) ruby will get confused about which one it’s going to need.</p>

<p>I’m going to use cucumber as an example but this counts for most ruby libraries. I’ve been using this for a few months already so it really doesn’t matter which version of IronRuby you’ve got installed. I’ve compiled a fresh version from github and deployed that to C:\ironruby on windows and added C:\ironruby\bin to my PATH environment variable. I installed my ironruby version on my *nix boxes in /usr/local/ironruby and added /usr/local/ironruby/bin, /usr/local/ironruby/silverlight/bin and /usr/local/ironruby/silverlight/scripts to my PATH environment variable.</p>

<h5>1. install the gem: igem install rspec cucumber &#8211;no-rdoc &#8211;no-ri</h5>

<p>this will install the rspec and cucumber gems with their dependencies. And the gems process will actually install the launcher scripts in C:\ironruby\lib\ironruby\gems\1.8\bin and we’re going to use those scripts to create our launcher script</p>

<h5>2. Get the launcher scripts into the bin dir</h5>

<p>On windows you can now go:</p>

<pre><code>copy C:\ironruby\lib\ironruby\gems\1.8\bin\cucumber C:\ironruby\bin\icucumber
copy C:\ironruby\lib\ironruby\gems\1.8\bin\cucumber.bat C:\ironruby\bin\icucumber.bat
</code></pre>

<p>NTFS supports symlinks so you could also use the junction tool from the sysinternals toolkit to create those instead of copying the files. <a href="http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx">http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx</a></p>

<p>On *nix based systems there is one more step to go through.</p>

<pre><code>cp /usr/local/ironruby/lib/IronRuby/gems/1.8/bin/cucumber /usr/local/ironruby/bin/icucumber
chmod +x /usr/local/ironruby/bin/icucumber
</code></pre>

<p>And this is the easier way to properly use installed gems from the ironruby distribution, it will also make it a lot easier to upgrade your gems in 2 different ruby installations at different times etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A rant on a talk falling to pieces]]></title>
    <link href="http://flanders.co.nz/2009/07/02/a-rant-on-a-talk-falling-to-pieces/"/>
    <updated>2009-07-02T14:45:21+02:00</updated>
    <id>http://flanders.co.nz/2009/07/02/a-rant-on-a-talk-falling-to-pieces</id>
    <content type="html"><![CDATA[<p>Earlier this week I had the pleasure of doing a talk for the Belgian .NET user group. During this talk I ran in to all kinds of problems. I&#8217;ve done presentations where I was royally underprepared and to avoid that this time I actually started prepping for this talk on time. I was done on time, was prepared had 5 backups of my presentation and samples. What did I learn from this, if you&#8217;re prepared other things will go wrong.    <br/>
I&#8217;ll share the story of stuff that can go wrong.</p>

<p>Before starting the rant I have some links to share.</p>

<ul>
<li><p><a href="http://www.slideshare.net/casualjim/ruby-loves-dot-net">Slides</a></p></li>
<li><p>IronRubyMvc sample – <a href="http://irtodo.koolkraft.net/">live demo</a> – <a href="http://github.com/casualjim/ironrubymvc-sample/tree/master">source</a></p></li>
<li><p>Silverlight sample – <a href="http://samples.koolkraft.net/picture_view/">live demo</a> – <a href="http://samples.koolkraft.net/picture_view.zip">source</a></p></li>
<li><p>IronRubyMVC specs – <a href="http://github.com/casualjim/ironrubymvc/tree">source</a></p></li>
<li><p>Sinatra – <a href="http://samples.koolkraft.net/sinatra.zip">source</a></p></li>
<li><p>Metaprogramming - <a href="http://samples.koolkraft.net/metaprogramming.zip">source</a></p></li>
</ul>


<p>I have a device that I call internet on a stick, which is a vodafone usb 3G modem that I plug in to my system and it gets me on the internet (mistake 1). Since I assumed that that thing would continue to work I made most of my demos internet enabled (mistake 2). For example I have a demo where I go download pics from flickr and then show them with some animations with silverlight.    <br/>
Before my presentation I changed the fonts, opened all the files I was going to talk about ran all the demos again to make sure they would work and everything went fine.     <br/>
I unplug the USB device and go into the room to hook up the projector etc. The presentation starts and for the first hour everything went really well (from my perspective at least don&#8217;t know about the people attending).     <br/>
We have a break and I plug the USB device in, at this point the vodafone program hangs (first time ever I swear). What&#8217;s more I can&#8217;t make it go away at all so I reboot my pc (this is still during the break).</p>

<p>Now I&#8217;m getting a little desperate because it still doesn&#8217;t work. With rebooting I also lost all my carefully opened files earlier (I&#8217;m showing code in about 3 different environments and 2 different OS&#8217;es).    <br/>
So during the presentation I apologise and try to reboot once more while taking questions from the audience and hoping somebody will try to start a discussion with me. After rebooting I got a message saying my date was set to 2001 which I thought was peculiar but clicked it away. I boot vmware fusion with windows 7 (this took fairly long and is a little bit funky as the screen resolution changes a lot during this process).     <br/>
Ok so far so good, by now I&#8217;ve already skipped the silverlight demo promising that it will be available as a download on my blog and will be moving on to the ironrubymvc sample. To prove I do actually use visual studio at times I wanted to open my demo project in visual studio. I open visual studio only for it to tell me that my trial has expired and I can either upgrade or close the application. Oooooookay this is completely weird because i get my software through my msdn subscription and I had been using it earlier that day.</p>

<p>Moral of the story: Either go vastly underprepared and wing it. Or don&#8217;t rely on the internet and always take at least 2 laptops that have identical configurations but I&#8217;m pretty sure those would or explode in my face or something will fall from the ceiling, building collapses or other mishaps.</p>

<p>Instead of having one demo go bad on me now I&#8217;m probably facing a reinstall of my mac because it lost a bunch of settings, for which I&#8217;m holding the vodafone responsible. At this moment I&#8217;m fairly certain that I should go less prepared and just wing it just out of fear for bigger disasters, people may die.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very simple IronRuby MVC sample application]]></title>
    <link href="http://flanders.co.nz/2009/06/09/very-simple-ironruby-mvc-sample-application/"/>
    <updated>2009-06-09T23:45:03+02:00</updated>
    <id>http://flanders.co.nz/2009/06/09/very-simple-ironruby-mvc-sample-application</id>
    <content type="html"><![CDATA[<p>Over the weekend I wrote a very simple task list application with IronRuby MVC and LightSpeed as an OR/M. And I’ve just put a demo live. This demo is running on a windows 2008 vps with IIS 7 as webserver. The source of this sample is also available.</p>

<p>At this moment I’m working on the <a href="http://github.com/jschementi/ironrubymvc/">Ironruby mvc</a> sample for my book. And while I was playing around to get some samples together I tried building the simplest application possible that has some degree relations in the db and does some crud. And I came up with the original idea of creating a task list application.</p>

<p>As an OR/M I choose to use <a href="http://www.mindscape.co.nz/products/LightSpeed/">LightSpeed</a> and it runs on a sqlite database so it should be immediately usable after checking out. There is one caveat though. If you’re using a 32-bit OS you’ll need to replace the sqlite dll that is included in the dependencies tree with a 32-bit version of the dll and rebuild the solution.</p>

<p>The links:</p>

<p>Demo:    <br/>
<a href="http://irtodo.koolkraft.net/">http://irtodo.koolkraft.net/</a></p>

<p>Source of sample:   <br/>
<a href="http://github.com/casualjim/ironrubymvc-sample">http://github.com/casualjim/ironrubymvc-sample</a></p>

<p>IronRubyMVC source:</p>

<p><a href="http://github.com/jschementi/ironrubymvc">http://github.com/jschementi/ironrubymvc</a></p>

<p>LightSpeed:   <br/>
<a href="http://www.mindscape.co.nz/products/LightSpeed/">http://www.mindscape.co.nz/products/LightSpeed/</a></p>

<p>Technorati Tags: <a href="http://technorati.com/tags/IronRuby+MVC">IronRuby MVC</a>,<a href="http://technorati.com/tags/IronRuby">IronRuby</a>,<a href="http://technorati.com/tags/ASP.NET+MVC">ASP.NET MVC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Caricature and IronRuby]]></title>
    <link href="http://flanders.co.nz/2009/05/21/getting-started-with-caricature-and-ironruby/"/>
    <updated>2009-05-21T14:52:17+02:00</updated>
    <id>http://flanders.co.nz/2009/05/21/getting-started-with-caricature-and-ironruby</id>
    <content type="html"><![CDATA[<p>IronRuby 0.5 was released yesterday. You can download it on <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25902#DownloadId=68919">codeplex</a>. This post will explain how you setup your ironruby environment to use it for testing existing CLR based assemblies. We’ll touch installing gems using rake and most importantly writing a test for a CLR based class where we’ll mock out the dependencies.</p>

<p>The first thing you need to do is download <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25902#DownloadId=68919">IronRuby</a>. After downloading you can extract it to a location on your hard drive. I extracted mine to C:\ironruby</p>

<p>Now we need to add the path to ir.exe to our PATH variable so we can use it from the command-line. And that is all there is to it to install ironruby on your machine. Now we need to get the necessary gems onto our system. We’ll need bacon and caricature.</p>

<p>Open a console and type the following:</p>

<p>igem list will show you a list of the gems you have installed on your system.</p>

<p>igem install will fetch and install a gem on your system. To install the gems we’re going to need we need to execute the command</p>

<p>igem install bacon caricature</p>

<p>That will result in the following output:</p>

<pre><code>+ C:\tools
» cmd
Microsoft Windows [Version 6.1.7100]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\tools&gt;where ir
C:\ironruby\bin\ir.exe

C:\tools&gt;exit
+ C:\tools
» igem list

*** LOCAL GEMS ***


+ C:\tools
» igem install bacon caricature
Successfully installed bacon-1.1.0
Successfully installed caricature-0.6.0
3 gems installed
Installing ri documentation for bacon-1.1.0...
Installing ri documentation for caricature-0.6.0...
Installing RDoc documentation for bacon-1.1.0...
Installing RDoc documentation for caricature-0.6.0...
</code></pre>

<p>If you would try to execute ibacon at this point that would work. We’ll need to create 2 small files to get ibacon to work. In the bin directory of ironruby I created 2 files one called ibacon and the other one is ibacon.bat</p>

<figure class='code'><figcaption><span>ibacon</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!C:/ironruby/bin/ir.exe</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This file was generated by RubyGems.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># The application &#39;bacon&#39; is installed as part of a gem, and</span>
</span><span class='line'><span class="c1"># this file is here to facilitate running it.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="s2">&quot;&gt;= 0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span> <span class="o">=~</span> <span class="sr">/^_(.*)_$/</span> <span class="ow">and</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="o">.</span><span class="n">correct?</span> <span class="vg">$1</span> <span class="k">then</span>
</span><span class='line'>  <span class="n">version</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>  <span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bacon&#39;</span><span class="p">,</span> <span class="n">version</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;bacon&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ibacon.bat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">ECHO</span> <span class="k">OFF</span>
</span><span class='line'>
</span><span class='line'><span class="p">@</span><span class="s2">&quot;ir.exe&quot;</span> <span class="s2">&quot;%~dpn0&quot;</span> %*
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>At this point you’re ready to start writing specs with bacon and caricature. Let’s look at an example I wrote for the controller factory for ironruby mvc.</p>

<p>We’re going to test the following C# code.</p>

<figure class='code'><figcaption><span>Models.cs    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IWeapon</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">Attack</span><span class="p">(</span><span class="n">IWarrior</span> <span class="n">warrior</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">Damage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IWarrior</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="nf">IsKilledBy</span><span class="p">(</span><span class="n">IWeapon</span> <span class="n">weapon</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">Attack</span><span class="p">(</span><span class="n">IWarrior</span> <span class="n">target</span><span class="p">,</span> <span class="n">IWeapon</span> <span class="n">weapon</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">SurviveAttackWith</span><span class="p">(</span><span class="n">IWeapon</span> <span class="n">weapon</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Sword</span> <span class="p">:</span> <span class="n">IWeapon</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Attack</span><span class="p">(</span><span class="n">IWarrior</span> <span class="n">warrior</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">warrior</span><span class="p">.</span><span class="n">SurviveAttackWith</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Damage</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I generally create a bacon_helper.rb file where I group my requires and helper functions etc. In the case of this test I have the following in the bacon_helper.rb:</p>

<figure class='code'><figcaption><span>bacon_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># add some search paths to ironruby</span>
</span><span class='line'><span class="c1"># this first one adds the path with the assemblies</span>
</span><span class='line'><span class="c1"># this enables us not to have to specify a path to the assemblies everywhere.</span>
</span><span class='line'><span class="vg">$:</span> <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/bin&quot;</span>
</span><span class='line'><span class="c1"># adds the path to the caricature library.</span>
</span><span class='line'><span class="vg">$:</span> <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/../lib&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># load the caricature library</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;caricature&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;caricature/clr&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># load the bacon library</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bacon&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Add the .NET framework</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mscorlib&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># load the assembly with the C# code</span>
</span><span class='line'><span class="n">load_assembly</span> <span class="s1">&#39;ClrModels&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>At this point we’re ready to start writing the test. create a file called sword_spec.rb and we’ll add the following content to the file.</p>

<figure class='code'><figcaption><span>swordspec.rb    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/bacon_helper.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;ClrModels::Sword&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@warrior</span> <span class="o">=</span> <span class="no">Caricature</span><span class="o">::</span><span class="no">Isolation</span><span class="o">.</span><span class="n">for</span> <span class="no">ClrModels</span><span class="o">::</span><span class="no">IWarrior</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should call survive_attack on the mock&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@warrior</span><span class="o">.</span><span class="n">when_receiving</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">return</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sword</span> <span class="o">=</span> <span class="no">ClrModels</span><span class="o">::</span><span class="no">Sword</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">sword</span><span class="o">.</span><span class="n">attack</span><span class="p">(</span><span class="vi">@warrior</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@warrior</span><span class="o">.</span><span class="n">did_receive?</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">be</span><span class="o">.</span><span class="n">successful</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should return different results when expectation is defined with arguments&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sword1</span> <span class="o">=</span> <span class="no">ClrModels</span><span class="o">::</span><span class="no">Sword</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">sword2</span> <span class="o">=</span> <span class="no">ClrModels</span><span class="o">::</span><span class="no">Sword</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@warrior</span><span class="o">.</span><span class="n">when_receiving</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">return</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@warrior</span><span class="o">.</span><span class="n">when_receiving</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">sword2</span><span class="p">)</span><span class="o">.</span><span class="n">return</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sword1</span><span class="o">.</span><span class="n">attack</span><span class="p">(</span><span class="vi">@warrior</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="mi">5</span>
</span><span class='line'>    <span class="n">sword2</span><span class="o">.</span><span class="n">attack</span><span class="p">(</span><span class="vi">@warrior</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="mi">15</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@warrior</span><span class="o">.</span><span class="n">did_receive?</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">sword2</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">be</span><span class="o">.</span><span class="n">successful</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we’ve got 2 tests for our Sword class. The only thing that is left to do is to run the specs. You can do that by executing the ibacon command and passing it the file you want to test.</p>

<pre><code>+ C:\dev\caricature
(master) » ibacon spec/sword_spec.rb
ClrModels::Sword
- should call survive_attack on the mock
- should return different results when expectation is defined with arguments

2 specifications (5 requirements), 0 failures, 0 errors
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caricature ready for beta]]></title>
    <link href="http://flanders.co.nz/2009/05/19/caricature-ready-for-beta/"/>
    <updated>2009-05-19T15:06:04+02:00</updated>
    <id>http://flanders.co.nz/2009/05/19/caricature-ready-for-beta</id>
    <content type="html"><![CDATA[<p>The last couple of days I’ve been getting <a href="http://github.com/casualjim/caricature">Caricature</a> to a more releasable state. The code got a thorough cleanup and refactor. Caricature now knows how to be a full mocking framework for Ruby classes and CLR classes that only interact with ruby objects. When I apply the 80/20 rule to caricature it’s definitely beta worthy.</p>

<p>I’m not a huge fan of the 80/20 rule unless all the features I want are in the 80 part. In that case for me it’s a 100 rule ;).</p>

<p>As for the latest changes:</p>

<p>Adding <code>require 'caricature'</code> only gives you ruby mocking. If you want to use it to mock CLR classes or interact with the CLR you’ll need to add an extra require statement:<code>require 'caricature/clr'</code>. I’ve done it this way so that I can still add Java and MacRuby support later on.</p>

<p>By default caricature will always give you an instance of an isolation, but there are times that you’ll want to substitute the result of a class method invocation. So the API got expanded with 2 methods, <code>when_class_receives</code> and <code>did_class_receive?</code> These methods enable you to setup substitutions for class method calls.</p>

<p>I’m still waiting for IronRuby 0.5 to be released to give you a blow-by-blow tutorial on how to setup your environment.</p>

<p>Basically you download the ironruby release from <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx">Codeplex</a></p>

<p>Then you make sure the path to ir.exe is in your PATH variable</p>

<p>After that you should be able to do igem list and get an empty result back.</p>

<p>now you need to install bacon you can do that by executing</p>

<p>  igem install bacon</p>

<p>next you need the caricature gem</p>

<p>  igem install caricature</p>

<p>You will also need rake to be installed to build the cs files included in the sources.</p>

<p>  igem install rake</p>

<p>ok now you should be good to to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bacon&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;caricature&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;caricature/clr&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;when isolating Ruby classes with class members&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@dagger</span> <span class="o">=</span> <span class="no">Dagger</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@soldier</span> <span class="o">=</span> <span class="no">Caricature</span><span class="o">::</span><span class="no">Isolation</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="no">SoldierWithClassMembers</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should work without expectations&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="vi">@dagger</span><span class="o">.</span><span class="n">attack</span> <span class="vi">@soldier</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@soldier</span><span class="o">.</span><span class="n">did_receive?</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="vi">@dagger</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">be</span><span class="o">.</span><span class="n">successful</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should work for expectations with an argument constraint&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@soldier</span><span class="o">.</span><span class="n">when_receiving</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="vi">@dagger</span><span class="p">)</span><span class="o">.</span><span class="n">return</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dagger</span><span class="o">.</span><span class="n">attack</span><span class="p">(</span><span class="vi">@soldier</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="mi">5</span>
</span><span class='line'>    <span class="vi">@soldier</span><span class="o">.</span><span class="n">did_receive?</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">be</span><span class="o">.</span><span class="n">successful</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>you can get the gem from <a href="http://rubyforge.org/projects/caricature/">rubyforge</a></p>

<p>Or from my github account: <a href="http://github.com/casualjim/caricature">http://github.com/casualjim/caricature</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An update on caricature]]></title>
    <link href="http://flanders.co.nz/2009/05/15/an-update-on-caricature/"/>
    <updated>2009-05-15T23:34:46+02:00</updated>
    <id>http://flanders.co.nz/2009/05/15/an-update-on-caricature</id>
    <content type="html"><![CDATA[<p>Yesterday I explained about caricature but I didn’t have it fully tested yet. Today I’ve written a bunch of integration specs for all the platform combinations Caricature currently supports so you should be able to use Caricature also for plain ruby object mocking in addition to CLR interop mocking.</p>

<p>After having a very brief twitter discussion with Scott I decided it would be a good idea to change the name of the methods <em>when_told_to</em> and <em>was_told_to?</em> . In ruby objects receive messages so the wording now becomes <em>when_receiving</em> and <em>did_receive? </em>. I have a problem with the should naming because there is nothing conditional about it. Either you want the method to return something or you want it to return a default value for CLR value types or nil. And if you’re asserting if a method it called that is deterministic; it is either called or not there is no gray area there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ninja</span> <span class="o">=</span> <span class="no">ClrModels</span><span class="o">::</span><span class="no">Ninja</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@weapon</span><span class="o">.</span><span class="n">when_receiving</span><span class="p">(</span><span class="ss">:attack</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">ninja</span><span class="p">)</span><span class="o">.</span><span class="n">return</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@ninja</span><span class="o">.</span><span class="n">attack</span><span class="p">(</span><span class="n">ninja</span><span class="p">,</span> <span class="vi">@weapon</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@weapon</span><span class="o">.</span><span class="n">did_receive?</span><span class="p">(</span><span class="ss">:attack</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">be</span><span class="o">.</span><span class="n">successful</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before I call it 1.0 I want to at least give ruby objects also the ability to isolate static and sealed methods as well as mocking ruby class methods. So that for CLR to Ruby interaction you a get the full range of possibilities.</p>

<p>I have also <a href="http://casualjim.github.com/caricature/Caricature.html">set up a site on github</a> that contains the API documentation for Caricature. When IronRuby 0.5 releases I’ll publish a blog post that will talk you through testing your CLR assembly with IronRuby, bacon and Caricature.</p>

<p>For now you can take a look <a href="http://github.com/casualjim/caricature/blob/7ab1d513be74b26c95a1ca34cc1d01f6c850cc43/spec/integration_spec.rb">here</a> for example on how to use Caricature for isolating features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IronRuby just got a mocking framework – kind of]]></title>
    <link href="http://flanders.co.nz/2009/05/14/ironruby-just-got-a-mocking-framework-kind-of/"/>
    <updated>2009-05-14T23:31:50+02:00</updated>
    <id>http://flanders.co.nz/2009/05/14/ironruby-just-got-a-mocking-framework-kind-of</id>
    <content type="html"><![CDATA[<p>As I mentioned in a previous <a href="http://flanders.co.nz/2009/05/03/mocking-for-ironruby/">post</a>. I started working on a small mocking framework. It has now progressed far enough to handle the most common mocking tasks.</p>

<p>Below I pasted the output of the integration tests for CLR interop.</p>

<pre><code>when isolating CLR interfaces        
- should work without expectations         
- should work with an expectation with any arguments         
- should work with an expectation getting different method call result         
- should work for an assertion on a specific argument 

when isolating CLR classes        
- should work without expectations         
- should work with an expectation for any arguments         
- should work with an assertion for specific arguments         
- should fail for an assertion with wrong arguments 

when isolating CLR instances        
- should work without expectations         
- should work with an expectation for any arguments         
- should fail for an assertion for specific arguments         
- should allow to delegate the method call to the real instance (partial mock)
</code></pre>

<p>you will need bacon installed to run the specs:</p>

<p>  igem install bacon</p>

<p>you can then install the caricature gem in ironruby by issueing</p>

<p>  igem install caricature</p>

<p>To use it there are some examples in the file spec/integration_spec.rb</p>

<figure class='code'><figcaption><span>spec/integration_spec.rb </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bacon&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;caricature&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ninja</span><span class="o">.</span><span class="n">when_told_to</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">return</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">weapon</span><span class="o">.</span><span class="n">attack</span><span class="p">(</span><span class="n">ninja</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">equal</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="n">ninja</span><span class="o">.</span><span class="n">was_told_to?</span><span class="p">(</span><span class="ss">:survive_attack_with</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">be</span><span class="o">.</span><span class="n">successful</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>There is a gotcha though, when you use it in a CLR class you&#8217;re bound to CLR rules and it only overrides the methods that are marked as virtual. We also can&#8217;t isolate static or sealed types at the moment.</p>

<p>I took the approach of doing away with the terminology of mocking and subbing and instead chose the much clearer Isolation. By default any method returns null or the default value of a value type. You can tell an isolation to return a specific value or raise an error etc. Later on you can then assert if the method was actually called.</p>

<p>This fits in better with the way you probably structure your tests.</p>

<p>I hope you like it.</p>

<p>You can find the source in my github account.</p>

<p><a href="http://github.com/casualjim/caricature">http://github.com/casualjim/caricature</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joined the lounge network]]></title>
    <link href="http://flanders.co.nz/2009/05/11/joined-the-lounge-network/"/>
    <updated>2009-05-11T20:14:30+02:00</updated>
    <id>http://flanders.co.nz/2009/05/11/joined-the-lounge-network</id>
    <content type="html"><![CDATA[<p>Today I received my invitation to the <a href="http://thelounge.net">Lounge</a> network. I just finished changing my homepage to include their ads in my side bar.    <br/>
My reasons for joining the ad network are that on one hand I’ve been an ad-sense member for a really long time and although I’ve had ads on multiple sites it never actually made me any money. Eventually I gave up on putting those ads on my blog. So I’m not really doing it to make any money of this blog, but if it takes a small bite out of my hosting bill I’ll be a happy man :).</p>

<p>The ads that are run by the lounge are .net centric and are a much better fit to the audience of this blog. It even may be helpful to somebody at times.</p>

<p>Let’s see how this works out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking for IronRuby]]></title>
    <link href="http://flanders.co.nz/2009/05/03/mocking-for-ironruby/"/>
    <updated>2009-05-03T14:10:04+02:00</updated>
    <id>http://flanders.co.nz/2009/05/03/mocking-for-ironruby</id>
    <content type="html"><![CDATA[<p>As you may or may not know I’m in the process of building IronRubyMvc. At one point I did write a bunch of tests in for the code I had at that point. However that test code was written in C# with xunit and moq. I wasn’t too happy about that so I deferred writing tests to a later date when I could use a Ruby library to write them.</p>

<p>That time has come, I can use bacon and it’s acceptable performance wise now, not stellar but workable. So when I started to port some of my previously written tests to bacon I ran into a road block. Mocking isn’t as straightforward as my optimistic self was expecting. This lead me to think about what exactly does a mocking framework do?</p>

<p>I’m pretty much a just stuff no fluff kind of guy when it comes to coding. So I tend to choose for solutions that have just the right amount of features and virtually no whistles and bells. I generally blame it on being slightly stupid so I can’t grok intensely complex solutions. Once you cross a treshold there is no way in hell I will ever look at it again.</p>

<p>Anyway the no fluff approach to mocking would be to look at the core responsibilities of those frameworks, which are 2 as far as I can tell.</p>

<ol>
<li>Generate a proxy for an object so you can intercept method calls</li>
<li>Allow for verificatons of those intercepted method calls to do things like how many times was this method called, was it called at all etc.</li>
</ol>


<p>So I’m starting to implement a way to generate proxies today.. This should be a piece of cake with Ruby :) Then I’ll look at implementing some constraints and verifications.</p>

<p>Thinking about how to approach the API for defining the mocks has also been an interesting experience. From the get-go a Record/Replay/Verify model is out. But then it comes to the following part, when do you define the verifications.</p>

<p>Do you do that in the assertion fase, thus stubbing everything beforehand and just allowing the user to define return values when establishing the test context. Or do you define the verification (at least twice, ignore arguments etc) when you establish the test context. My vote goes to the first option.</p>

<p>So a new project is born it’s called caricature and lives on github. Which will try to implement the ideas set forward in this blog post for <a href="http://ironruby.net">IronRuby</a>.</p>

<p><a href="http://github.com/casualjim/caricature">http://github.com/casualjim/caricature</a></p>

<p>Technorati Tags: <a href="http://technorati.com/tags/IronRuby">IronRuby</a>,<a href="http://technorati.com/tags/Mocking">Mocking</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using IronRuby with RubyMine]]></title>
    <link href="http://flanders.co.nz/2009/05/02/using-ironruby-with-rubymine/"/>
    <updated>2009-05-02T14:50:37+02:00</updated>
    <id>http://flanders.co.nz/2009/05/02/using-ironruby-with-rubymine</id>
    <content type="html"><![CDATA[<p><a href="http://www.jetbrains.com/ruby/">RubyMine</a> was released earlier this week. I’ve used rubymine in the past and was very impressed with the IDE, so much that I’m silently hoping the guys from <a href="http://www.jetbrains.com/">Jetbrains</a> would do a C# IDE too. I’d probably buy that one as well, but for now I’ll settle for <a href="http://www.jetbrains.com/resharper">Resharper</a> with Visual studio.</p>

<p>By default Rubymine won’t accept <a href="http://ironruby.net">IronRuby</a> as a ruby SDK, but I asked for help in the twitterverse and got it (<a href="http://twitter.com/iRomeo/statuses/1677867948">http://twitter.com/iRomeo/statuses/1677867948</a>).</p>

<p><a href="http://flanders.co.nz/wp-content/uploads/2009/05/settings-rubymine.jpg"><img src="http://flanders.co.nz/wp-content/uploads/2009/05/settings-rubymine-thumb.jpg" alt="settings_rubymine" /></a></p>

<p>Just symlinking didn’t really work because the ruby.exe listens to &#8211;version for getting its version number.  IronRuby on the other hand listens to –v to get its version number.  The solution to that is to create a batch file that will translate the &#8211;version  modifier to –v.</p>

<p>So instead of symlinking the ir.exe to a name that starts with ruby I created a batch file called ruby_iron.cmd with the following content.</p>

<pre><code>@echo off
set IR_CMD="%~dp0ir.exe"
if "%1"=="--version" ( GOTO RUBY_VERSION )
GOTO RUBY
:RUBY_VERSION
%IR_CMD% -v
goto QUIT
:RUBY
%IR_CMD%
:QUIT
</code></pre>

<p>With that ruby_iron.cmd file in place you can just add IronRuby as an SDK in RubyMine.</p>

<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binder for ironruby mvc]]></title>
    <link href="http://flanders.co.nz/2009/04/08/binder-for-ironruby-mvc/"/>
    <updated>2009-04-08T19:07:22+02:00</updated>
    <id>http://flanders.co.nz/2009/04/08/binder-for-ironruby-mvc</id>
    <content type="html"><![CDATA[<p>I’ve progressed far enough with <a href="http://ironruby.net">IronRuby</a> MVC to start thinking about a sample and I’ve decided to write 2 separate samples both on the same technologies. As an OR/M I will be using <a href="http://www.mindscape.co.nz/products/LightSpeed/default.aspx">LightSpeed</a> from Mindscape, just because it’s an awesome piece of technology.</p>

<p>At this moment I’m looking at creating a binder for objects that takes a hash as input. The default model binder of ASP.NET MVC doesn’t quite fit all that well with the ironruby implementation so I’m creating a ruby binder implementation. This stuff is just something that makes ruby shine.</p>

<p>While doing so I came up with this little tidbit of code:</p>

<pre><code>class System::Object

  class &lt;&lt; self

    def create_from_hash(options)
      result = self.new
      result.populate_from_hash options
      result
    end

  end

  def populate_from_hash(options)
    options.each do |k, v|
      mn = "#{k}=".to_sym
      self.send(mn, v) if self.respond_to?(mn)
    end
  end
end
</code></pre>

<p>This code allows you to populate any .NET object from a hash.</p>

<p>So doing Person.create_from_hash(:username => “joe”) would create a user instance with the property username set to joe.</p>

<p>You do need to provide a hash where the values have the correct type.</p>

<p>Technorati Tags: <a href="http://technorati.com/tags/IronRuby+MVC">IronRuby MVC</a>,<a href="http://technorati.com/tags/IronRuby">IronRuby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git/Github survival guide]]></title>
    <link href="http://flanders.co.nz/2009/03/21/gitgithub-survival-guide/"/>
    <updated>2009-03-21T18:33:32+01:00</updated>
    <id>http://flanders.co.nz/2009/03/21/gitgithub-survival-guide</id>
    <content type="html"><![CDATA[<p>Lately I’ve been helping a few people to get started on <a href="http://github.com">Github</a>. I use git at the command line and my survival guide is also based on that way of interacting with <a href="http://git-scm.com/">Git</a>. So I thought I’d write the procedure up so that I can just point people to this page.</p>

<p>The first tip I can give you and most of what I’ll be talking about is in the <a href="http://github.com/guides/home">guides</a> from github. When you’re used to Subversion or Team Foundation Server for example you’ll need to make a mental leap. That leap would be to realise that your local copy <em>is</em> the master copy for you. The remote server like github.com is one is a little bit like an afterthought. I think it goes a little bit like this: “O cool I’ve built this really cool thing here and I’ve got it in this git repository on my machine. It would be cool if other people also had access. Wait a minute, I’ll just add a remote and push my stuff onto that server.” Problem solved.</p>

<p>Most of this guide applies to both windows and *nix systems except for the next part because that will describe the install parameters for getting msysgit to behave nicely on your system.</p>

<p>==== Windows only ====</p>

<p>If you’re on windows I suggest you use <a href="http://code.google.com/p/msysgit">msysgit</a> as your git client. You can probably use everything I’m about to explain from explorer too if you want to use <a href="http://code.google.com/p/tortoisegit/">tortoisegit</a> or just prefer gui’s. I, personally, like having options so I’ll probably use a mix of those in the future. Ok onto the install procedure.</p>

<p>Somewhere half-way through the install of msysgit it will ask you how far you want to integrate it. The correct choice is the middle one: Run Git from the Windows Command Prompt. For generating ssh keys etc you probably want to use OpenSSH.</p>

<p>==== Windows only end ====</p>

<p>When the install of msysgit is completed it is time to start configuring your git install for usage with github. The first step you need to take is to tell git your username and email address. You will also need your API token that you can find on your <a href="http://github.com/account">account page</a>.</p>

<pre><code>[~]$ git config --global user.name &lt;span class="str"&gt;"Ivan Porto Carrero"&lt;/span&gt;
[~]$ git config --global user.email ivan@nowhere.com
[~]$ git config --global github.user casualjim
[~]$ git config --global github.token [[API TOKEN]]
</code></pre>

<p>This information can be found in the github guides: <a href="http://github.com/guides/tell-git-your-user-name-and-email-address">http://github.com/guides/tell-git-your-user-name-and-email-address</a>. The configuration above is global but you can still override that on a per project basis.</p>

<p>Now that git knows how to deal with github it is time to formally introduce your machine to the github server. To do so you might have to create an ssh key private/public keypair. A tip I can give you before you start the creation is that you probably don’t want to type a password everytime you push to github. So when you create your ssh key don’t use a passphrase (leave it blank when asked for one).</p>

<p>The procedure on how to create the ssh keys can againn be found in the github guides: <a href="http://github.com/guides/providing-your-ssh-key">http://github.com/guides/providing-your-ssh-key</a>. On windows I would suggest that you use the openssh one. I use RSA keys but you can choose whichever flavor you want of course :) After generating the ssh keys you need to provide them to github in your <a href="http://github.com/account">account page</a>.</p>

<p>This should get you up and running with github. I’m assuming most people coming to github are familiar with subversion so I’ll try to map some common operations to the command sequence you need in git.</p>

<p>First things first I have a couple of aliases defined for some common operations.</p>

<p>You can just copy paste the aiases section below in the .gitconfig file that you can find in the root of your personal folder. C:\users\ivan.gitconfig on vista for me and ~/.gitconfig in bash.</p>

<pre><code>[alias]
    ci = commit
    st = status
    co = checkout
</code></pre>

<p>If all you need is read-only access to a repository you can just clone a repository by its public clone url ie. git clone git://github.com/casualjim/ironrubymvc.git</p>

<p>The first operation you’ll need is how to get source code, make changes and send in a patch. In git lingo this is called forking.</p>

<p>On github you fork the project you want to make changes too. Then you clone that project on your local machine and make your changes. You then push your changes back to your repository and send a pull request to the original project. That is all you need to do to send in a patch, issue a pull request.</p>

<p>I forked ironrubymvc from Jimmy Schementi and send him pull requests regularly when I’ve completed a chunk of work on it. so here’s the sequence of commands I use to do this.</p>

<p><em><strong>git clone </strong></em><a href="mailto:git@github.com:casualjim/ironrubymvc.git"><em><strong>git@github.com:casualjim/ironrubymvc.git</strong></em></a></p>

<p>… make some changes …</p>

<p>To start updating the repository with my changes I’ll generally first ask for a status to see if I need to add some files to ignore and if there are new files that need te be included</p>

<p><em><strong>git st </strong></em></p>

<p>If there are files that need to be ignored I’ll add them to the .gitignore file in my project root. If there are still some new files that need to be added:</p>

<p><strong><em>git add .</em></strong></p>

<p>Then I’m ready to commit the changes to my local repository:</p>

<p><em><strong>git ci –a –m “Made ironrubymvc do the dishes and ironing”</strong></em></p>

<p>Now it’s time to push my changes to the github server.</p>

<p><em><strong>git push</strong></em></p>

<p>And now I need to go to the github website and send a pull request to Jimmy. He can then decide if he wants to apply the patch or make some changes.</p>

<p>The next step is to keep your fork in sync with the forked repository, so that you can continue to pick up their changes and ensure that your changes still work.</p>

<p><em><strong>git remote add upstream git://github.com/jschementi/ironrubymvc.git</strong></em></p>

<p>to automatically fetch and then merge the changes from the upstream repository you can pull from it. You have to tell pull the remote source it has to pull from and the target branch.</p>

<p><strong><em>git pull upstream master</em></strong></p>

<p>A more detailed explanation of this process can be found in the github guides. <a href="http://github.com/guides/fork-a-project-and-submit-your-modifications">http://github.com/guides/fork-a-project-and-submit-your-modifications</a></p>

<p>The next thing we’re going to map is svn:externals. In git this is called submodules. They have a great explanation off that in the github guides <a href="http://github.com/guides/developing-with-submodules">http://github.com/guides/developing-with-submodules</a></p>

<p>Suppose you made some changes and they aren’t really what you want and you want to restore the repository to the last commit.</p>

<p><strong><em>git reset &#8211;hard</em></strong></p>

<p>The last topic is branching and merging changes etc. As an example I will take the <a href="http://ironruby.net">IronRuby</a> project for which Michael Letterle and myself maintain the linux branch. This branch ensures that IronRuby gets the fixes it needs to compile on mono. A typical workflow for me when I sync it with the source repository @ git://github.com/ironruby/ironruby.git from the ironruby project root on my local machine.</p>

<p>Previously I did:</p>

<p><em><strong>git clone git@github.com:mletterle/ironruby.git</strong></em></p>

<p><em><strong>git remote add ironruby git://github.com/ironruby/ironruby.git</strong></em></p>

<p>And to create and track the remote linux branch I issued the following commands:</p>

<p><strong><em>git co –-track –b linux origin/linux</em></strong></p>

<p><strong><em>git pull</em></strong></p>

<p>This has now got my local copy set up with a linux branch and has pulled in the contents of the remote branch to my local repository.</p>

<p>When there are changes in the source repository I issue the following commands:</p>

<p><strong><em>git co master</em></strong> // Check out the master branch</p>

<p><strong><em>git pull ironruby master</em></strong> // Pull in changes from remote</p>

<p><strong><em>git co linux</em></strong> // Check out the linux branch</p>

<p><strong><em>git merge master</em></strong> // Merge in the changes from the master branch</p>

<p><strong><em>mate .</em></strong> // Open textmate to resolve conflicts</p>

<p><strong><em>git add .</em></strong> // Add the files with the resolved conflicts back to the repository</p>

<p><strong><em>git ci –a –m “Synced with upstream”</em></strong> // submit changes</p>

<p><strong><em>git push</em></strong> // update the github server</p>

<p>The information above can be found in the github guides as well but in several places:</p>

<p><a href="http://github.com/guides/git-cheat-sheet">http://github.com/guides/git-cheat-sheet</a></p>

<p><a href="http://github.com/guides/showing-and-tracking-remote-branches">http://github.com/guides/showing-and-tracking-remote-branches</a></p>

<p><a href="http://github.com/guides/push-a-branch-to-github">http://github.com/guides/push-a-branch-to-github</a></p>

<p><a href="http://github.com/guides/keeping-a-git-fork-in-sync-with-the-forked-repo">http://github.com/guides/keeping-a-git-fork-in-sync-with-the-forked-repo</a></p>

<p><a href="http://beans.seartipy.com/2008/12/09/setting-up-ruby-on-rails-projects-with-git-and-github/">http://beans.seartipy.com/2008/12/09/setting-up-ruby-on-rails-projects-with-git-and-github/</a></p>

<p>Those are the commands I use about 95% of the time when I’m working with git. I thought they might be useful to other people hence the share.</p>

<p>If you combine the above with my previous post on how to git-enable your command-line <a href="http://flanders.co.nz/2009/03/19/pimp-your-command-line-for-git/">http://flanders.co.nz/2009/03/19/pimp-your-command-line-for-git/</a> . I guess you’ve got a pretty sweet setup.</p>

<p><strong>There is one gotcha that I’d like to repeat one more time. When you’re branching you have to close the solution in visual studio or all kinds of nastiness will ensue. Visual studio will lock some files and if git wants to remove them it can’t. This results in a branch that is probably messed up.</strong></p>

<p><a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fflanders.co.nz%2f2009%2f03%2f21%2fgitgithub-survival-guide%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fflanders.co.nz%2f2009%2f03%2f21%2fgitgithub-survival-guide%2f" alt="kick it on DotNetKicks.com" /></a></p>

<p>Technorati Tags: <a href="http://technorati.com/tags/git">git</a>,<a href="http://technorati.com/tags/github">github</a>,<a href="http://technorati.com/tags/cheat+sheet">cheat sheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pimp your command-line for git]]></title>
    <link href="http://flanders.co.nz/2009/03/19/pimp-your-command-line-for-git/"/>
    <updated>2009-03-19T21:11:27+01:00</updated>
    <id>http://flanders.co.nz/2009/03/19/pimp-your-command-line-for-git</id>
    <content type="html"><![CDATA[<p>I do development on both the Mac and windows. I prefer to use git as my source control these days and have done so for the past year or so. Git is great, I love it. I love the ease of branching a lot too. I’ll often just branch of locally just to play around with an idea without affecting the master branch.</p>

<p>But having many branches can be confusing at times, especially in my case as I can only remember what I was doing for 5 seconds. So sometimes I mess up a perfectly good branch because of the confusion.</p>

<p>On windows I use Powershell as my command-line. I don’t know much of powershell scripting. To be honest I mainly started using it because then I wouldn’t constantly get an error when I typed ls instead of dir :) However since then I did explore that environment a little and it <em>does</em> give me easy access to the CLR and a way to create very very powerful batch files, although I do most of my scripting in Ruby these days. It also allows you to customize your prompt. You need to allow scripts unrestricted access for this to work. You can do that by entering Set-ExecutionPolicy Unrestricted at a powershell prompt. Then you close powershell and create a file in %MYDOCUMENTS%\WindowsPowershell called profile.ps1</p>

<pre><code>&lt;span class="kwrd"&gt;function&lt;/span&gt; prompt





{





    $host.ui.rawui.WindowTitle = $(get-location)





    Write-Host (&lt;span class="str"&gt;"+ "&lt;/span&gt; + $(get-location)) -foregroundcolor Yellow











        $branches = &lt;span class="str"&gt;""&lt;/span&gt;





        git branch | &lt;span class="kwrd"&gt;foreach&lt;/span&gt; {





            &lt;span class="kwrd"&gt;if&lt;/span&gt;($_ &lt;span class="preproc"&gt;-match&lt;/span&gt; &lt;span class="str"&gt;"^\*\s(.*)"&lt;/span&gt;){





                $branches += $matches[1]





            }





        }





    &lt;span class="kwrd"&gt;if&lt;/span&gt;($branches){





        Write-Host (&lt;span class="str"&gt;"("&lt;/span&gt; + $branches + &lt;span class="str"&gt;") "&lt;/span&gt;) -nonewline -fore Cyan





    }

















    Write-Host (&lt;span class="str"&gt;"»"&lt;/span&gt;) -nonewline -foregroundcolor Green





    &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="str"&gt;" "&lt;/span&gt;





}
</code></pre>

<p>The result of this prompt looks like this:</p>

<p><a href="http://flanders.co.nz/wp-content/uploads/2009/03/picture2.png"><img src="http://flanders.co.nz/wp-content/uploads/2009/03/picture2-thumb.png" alt="Picture 2" /></a></p>

<p>In bash I use a .bashrc script that shows me the branch in my prompt. You need ttycolors enabled to enjoy the full prompt but this is the section that takes care of my prompt.</p>

<pre><code>&lt;span class="kwrd"&gt;if&lt;/span&gt; [ -n &lt;span class="str"&gt;"$force_color_prompt"&lt;/span&gt; ]; then





    &lt;span class="kwrd"&gt;if&lt;/span&gt; [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; then





    &lt;span class="rem"&gt;# We have color support; assume it's compliant with Ecma-48&lt;/span&gt;





    &lt;span class="rem"&gt;# (ISO/IEC-6429). (Lack of such support is extremely rare, and such&lt;/span&gt;





    &lt;span class="rem"&gt;# a case would tend to support setf rather than setaf.)&lt;/span&gt;





    color_prompt=yes





    &lt;span class="kwrd"&gt;else&lt;/span&gt;





    color_prompt=





    fi





fi











parse_git_branch() {





  git branch 2&gt; /dev/null | sed -e &lt;span class="str"&gt;'/^[^*]/d'&lt;/span&gt; -e &lt;span class="str"&gt;'s/* \(.*\)/(\1)/'&lt;/span&gt;





}

















&lt;span class="rem"&gt;# export PS1='\e[0;32m+ \u @ \w\e[m\e[0;33m »\e[m '&lt;/span&gt;





&lt;span class="kwrd"&gt;if&lt;/span&gt; [ &lt;span class="str"&gt;"$color_prompt"&lt;/span&gt; = yes ]; then





    PS1=&lt;span class="str"&gt;"\[\033[01;36m\]+\u@\h\[\033[00m\]:\[\033[01;32m\]\w\[\033[00m\]\[\033[01;33m\]\n\$(parse_git_branch)»\[\033[00m\] "&lt;/span&gt;





&lt;span class="kwrd"&gt;else&lt;/span&gt;





  PS1=&lt;span class="str"&gt;"\u@\h:\w\$(parse_git_branch)\$ "&lt;/span&gt;





fi
</code></pre>

<p>The result of the bash script looks like this:</p>

<p><a href="http://flanders.co.nz/wp-content/uploads/2009/03/picture1.png"><img src="http://flanders.co.nz/wp-content/uploads/2009/03/picture1-thumb.png" alt="Picture 1" /></a></p>

<p><a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fflanders.co.nz%2f2009%2f03%2f19%2fpimp-your-command-line-for-git%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fflanders.co.nz%2f2009%2f03%2f19%2fpimp-your-command-line-for-git%2f" alt="kick it on DotNetKicks.com" /></a></p>

<p>Technorati Tags: <a href="http://technorati.com/tags/Git">Git</a>,<a href="http://technorati.com/tags/Powershell">Powershell</a>,<a href="http://technorati.com/tags/Bash">Bash</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ninject knows a new trick]]></title>
    <link href="http://flanders.co.nz/2009/03/15/ninject-knows-a-new-trick/"/>
    <updated>2009-03-15T01:32:30+01:00</updated>
    <id>http://flanders.co.nz/2009/03/15/ninject-knows-a-new-trick</id>
    <content type="html"><![CDATA[<p>Earlier this week Nate <a href="http://kohari.org/2009/03/13/ninject-github-crazy-delicious/">already said</a> that I was doing some work on <a href="http://ninject.org">Ninject</a>, now I have it working :). Everything I’m about to talk about is currently in the master tree of the <a href="http://github.com/enkari/ninject">ninject github</a> repository. Getting <a href="http://ironruby.net">IronRuby</a> to play nice with <a href="http://ninject.org">Ninject</a> was surprisingly easy :).</p>

<p>There was only one place that required some kind of weird workaround and from that workaround I’m entirely sure that it will go away by the time .NET 4.0 will be here. The DLR duplicates a number of delegates from .NET 4.0 but .NET 3.5 also defines them (i.e. System.Func&lt;T, TT>) and then you get great exception messages like: System.Func is not of type System.Func. The solution is to not reference System.Core in your project. Except that Ninject expects the System.Core variant at some point and that was solved by aliasing the System.Core assembly and talking to the types in that assembly by their alias.</p>

<p>Anyway the juicy stuff :) How can you take advantage of Ninjects newly found friendship with <a href="http://ironruby.net">IronRuby</a>.</p>

<p><a href="http://ninject.org">Ninject</a> now has 2 flavors of Kernels. We have a StandardKernel that knows how to deal with the module configuration system that uses a fluent interface defined in C#. And now we also have a DlrKernel that extends the StandardKernel with a RubyModuleLoader plugin. If you tell the DlrKernel to look inside a path for configuration files it will scan those folders for <em>.dll or </em>.rb files. Those files should contain the configuration for the ninject bindings.</p>

<p>So to create a Kernel that is ruby enabled you would use the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IKernel</span> <span class="n">kernel</span> <span class="p">=</span> <span class="n">DlrKernel</span><span class="p">();</span>
</span><span class='line'><span class="n">kernel</span><span class="p">.</span><span class="n">AutoLoadModulesRecursively</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">samurai</span> <span class="p">=</span> <span class="n">kernel</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">IWarrior</span><span class="p">&gt;();</span>
</span><span class='line'><span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">samurai</span><span class="p">.</span><span class="n">Weapon</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above snippet could then for example load a configuration file that has been defined like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/../Ninject.Tests.dll&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Ninject</span><span class="o">::</span><span class="no">Tests</span><span class="o">::</span><span class="no">Fakes</span>
</span><span class='line'>
</span><span class='line'><span class="n">to_configure_ninject</span> <span class="k">do</span> <span class="o">|</span><span class="n">ninject</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IWeapon</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">Sword</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IWarrior</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">Samurai</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The configuration above shows how most of a typical configuration would be defined by you the full configuration API at your disposal. All the options for the configuration can be specified in 2 ways. The first way is in a hash like syntax and the second way uses a more fluent syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">to_configure_ninject</span> <span class="k">do</span> <span class="o">|</span><span class="n">ninject</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IServiceA</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">ServiceA</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:singleton</span><span class="p">,</span>
</span><span class='line'>                          <span class="ss">:meta</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;superservice&quot;</span> <span class="p">},</span>
</span><span class='line'>                          <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;aaaaa&quot;</span><span class="p">,</span>
</span><span class='line'>                          <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                            <span class="ss">:parameter</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:my_param</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">context</span><span class="o">|</span> <span class="s2">&quot;param_value&quot;</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>                            <span class="ss">:constructor_arguments</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:const_arg</span> <span class="o">=&gt;</span> <span class="mi">56</span> <span class="p">},</span>
</span><span class='line'>                            <span class="ss">:property_values</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:property_name</span> <span class="o">=&gt;</span> <span class="mi">94</span> <span class="p">},</span>
</span><span class='line'>                          <span class="p">},</span>
</span><span class='line'>                          <span class="ss">:on_activation</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span> <span class="n">obj</span><span class="o">.</span><span class="n">do_some_work</span> <span class="p">},</span>
</span><span class='line'>                          <span class="ss">:on_deativated</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span> <span class="n">obj</span><span class="o">.</span><span class="n">do_some_cleanup</span> <span class="p">},</span>
</span><span class='line'>                          <span class="ss">:when</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">context</span><span class="o">|</span> <span class="s2">&quot;a value&quot;</span> <span class="p">}</span> <span class="c1"># or</span>
</span><span class='line'>                          <span class="c1"># :when =&gt; { :injected_into =&gt; ServiceB } or</span>
</span><span class='line'>                          <span class="c1"># :when =&gt; { :target_has =&gt; AnAttribute } or</span>
</span><span class='line'>                          <span class="c1"># :when =&gt; { :member_has =&gt; AnAttribute } or</span>
</span><span class='line'>                          <span class="c1"># :when =&gt; { :class_has =&gt; AnAttribute }</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">to_configure_ninject</span> <span class="k">do</span> <span class="o">|</span><span class="n">ninject</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IServiceA</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">ServiceA</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:singleton</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">meta</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;superservice&quot;</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;aaaaa&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">with</span> <span class="ss">:parameter</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:my_param</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">context</span><span class="o">|</span> <span class="s2">&quot;param_value&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">with</span> <span class="ss">:constructor_arguments</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:const_arg</span> <span class="o">=&gt;</span> <span class="mi">56</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">with</span> <span class="ss">:property_values</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">property_name</span> <span class="o">=&gt;</span> <span class="mi">94</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on_activation</span> <span class="k">do</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span>
</span><span class='line'>      <span class="n">obj</span><span class="o">.</span><span class="n">do_some_work</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on_deativation</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span> <span class="n">obj</span><span class="o">.</span><span class="n">do_some_cleanup</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">condition</span> <span class="k">do</span> <span class="o">|</span><span class="n">context</span><span class="o">|</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># or</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">condition</span> <span class="ss">:injected_into</span> <span class="o">=&gt;</span> <span class="no">SomeClass</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># or ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of the nicer consequences of using Ruby as a configuration language is the syntax for open generics. The example below shows how to configure types with open generics.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/../Ninject.Tests.dll&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Ninject</span><span class="o">::</span><span class="no">Tests</span><span class="o">::</span><span class="no">Fakes</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Ninject</span><span class="o">::</span><span class="no">Tests</span><span class="o">::</span><span class="no">Integration</span><span class="o">::</span><span class="no">StandardKernelTests</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># IGeneric is a generic interface and GenericService is a generic type</span>
</span><span class='line'><span class="c1"># we don&#39;t have to specify any special notation for open generics</span>
</span><span class='line'>
</span><span class='line'><span class="n">to_configure_ninject</span> <span class="k">do</span> <span class="o">|</span><span class="n">ninject</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IGeneric</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">GenericService</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:transient</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IGeneric</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">GenericService2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To specify a condition the syntax would look like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/../Ninject.Tests.dll&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Ninject</span><span class="o">::</span><span class="no">Tests</span><span class="o">::</span><span class="no">Fakes</span>
</span><span class='line'>
</span><span class='line'><span class="n">to_configure_ninject</span> <span class="k">do</span> <span class="o">|</span><span class="n">ninject</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IWeapon</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">Shuriken</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">condition</span> <span class="k">do</span> <span class="o">|</span><span class="n">request</span><span class="o">|</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">target</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>             <span class="p">?</span> <span class="kp">false</span>
</span><span class='line'>             <span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">target</span><span class="o">.</span><span class="n">member</span><span class="o">.</span><span class="n">reflected_type</span> <span class="o">==</span> <span class="no">Samurai</span><span class="o">.</span><span class="n">to_clr_type</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IWeapon</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">Sword</span>
</span><span class='line'>  <span class="n">ninject</span><span class="o">.</span><span class="n">bind</span> <span class="no">IWarrior</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="no">Samurai</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well that’s all. I hope you like it. I will be looking into more ways to integrate DLR stuff into <a href="http://ninject.org">Ninject</a> the most obvious is allowing you to inject dynamic types into static classes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IronRuby MVC progress]]></title>
    <link href="http://flanders.co.nz/2009/03/09/ironruby-mvc-progress/"/>
    <updated>2009-03-09T19:18:22+01:00</updated>
    <id>http://flanders.co.nz/2009/03/09/ironruby-mvc-progress</id>
    <content type="html"><![CDATA[<p>If you follow my tweets or the <a href="http://ironruby.net">IronRuby</a> mailinglist then you would know that I’ve been working on taking <a href="http://ironruby.net">IronRuby</a> ASP.NET MVC from the prototype stages to a more complete application. For me this has been a great experience getting familiar with the insides of ASP.NET MVC as well as playing around with integrating <a href="http://ironruby.net">IronRuby</a> in an existing C# application.</p>

<p>The guys over at MSFT (<a href="http://www.iunknown.com">John Lam</a>, <a href="http://blog.jimmy.schementi.com">Jimmy Schementi</a> and <a href="http://haacked.com">Phil Haack</a>) had previously created a prototype and I built upon their work. You can read more about the previous versions of the prototype.     <br/>
<a href="http://www.iunknown.com/2008/06/ironruby-and-aspnet-mvc.html">http://www.iunknown.com/2008/06/ironruby-and-aspnet-mvc.html</a>     <br/>
<a href="http://blog.jimmy.schementi.com/2008/07/aspnet-and-dynamic-languages.html">http://blog.jimmy.schementi.com/2008/07/aspnet-and-dynamic-languages.html</a>     <br/>
<a href="http://haacked.com/archive/2008/06/12/ironruby-and-asp.net-bffs-forever.aspx">http://haacked.com/archive/2008/06/12/ironruby-and-asp.net-bffs-forever.aspx</a>     <br/>
<a href="http://haacked.com/archive/2008/07/20/ironruby-aspnetmvc-prototype.aspx">http://haacked.com/archive/2008/07/20/ironruby-aspnetmvc-prototype.aspx      <br/>
</a><a href="http://haacked.com/archive/2009/02/17/aspnetmvc-ironruby-with-filters.aspx">http://haacked.com/archive/2009/02/17/aspnetmvc-ironruby-with-filters.aspx</a></p>

<p>In a previous post I explained what I had done I explained how I found an entry point and how to get started building your own mvc framework on top of asp.net MVC.</p>

<p><a href="http://flanders.co.nz/2009/01/25/created-a-basic-integration-for-ironruby-and-aspnet-mvc/">http://flanders.co.nz/2009/01/25/created-a-basic-integration-for-ironruby-and-aspnet-mvc/</a></p>

<p>How far am I now since my last post? Well we’ve got action filters, result filters, exception filters and authorization filters. We have an IronRubyMvcApplication as a base HttpApplication. Which should get you pretty far when building apps with <a href="http://github.com/casualjim/ironrubymvc">IronRuby MVC</a>.</p>

<p>I’m currently looking at implementing selectors and aliased actions. When I’m done with that I guess I’ve got a fairly working implementation of asp.net MVC and I’ll start developing a sample with it.</p>

<p>I’ve actually started building the sample to find out if I’ve missed something. The sample will be using <a href="http://www.mindscape.co.nz/products/LightSpeed/default.aspx">LightSpeed</a>, <a href="http://github.com/jschementi/ironrubymvc">IronRubyMVC</a> as well as youtube and flickr.</p>

<p>I would love to hear from people that submit bugs or even patches. I’d also like to get some discussion going on what is going to happen to it in the future :)</p>

<p><a href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2fflanders.co.nz%2f2009%2f03%2f09%2fironruby-mvc-progress%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fflanders.co.nz%2f2009%2f03%2f09%2fironruby-mvc-progress%2f" alt="kick it on DotNetKicks.com" /></a></p>
]]></content>
  </entry>
  
</feed>
