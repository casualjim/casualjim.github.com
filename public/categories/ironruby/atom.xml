<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IronRuby | Ivan Porto Carrero]]></title>
  <link href="http://flanders.co.nz/categories/ironruby/atom.xml" rel="self"/>
  <link href="http://flanders.co.nz/"/>
  <updated>2012-04-23T12:05:35+02:00</updated>
  <id>http://flanders.co.nz/</id>
  <author>
    <name><![CDATA[Ivan Porto Carrero]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding a console to your IronRuby application]]></title>
    <link href="http://flanders.co.nz/2009/12/01/adding-a-console-to-your-ironruby-application/"/>
    <updated>2009-12-01T11:00:44+01:00</updated>
    <id>http://flanders.co.nz/2009/12/01/adding-a-console-to-your-ironruby-application</id>
    <content type="html"><![CDATA[<p>When building an application it might be very handy to have a REPL console that knows about the libraries of your application, but you don’t necessarily want to start your application to interact with it. In Rails they have a script/console command. Here’s how you create one that knows about ironruby. The example I’m going to use is taken from an IronRubyMVC application.</p>

<p>I started out by creating a folder script.</p>

<p>Then I created a file called console (on a unix system I would chmod +x this file). I also like to have completion in my console so I’ve added the irb/completion library. Then I’ll require the routes.rb file so that the libraries of my application get loaded.</p>

<p>``` sh console script</p>

<h1>!/usr/bin/env ir</h1>

<h1>File: script/console</h1>

<p>irb = ENV['OS'] =~ /<sup>Windows/iu</sup> ? 'CALL iirb.bat' : 'iirb'</p>

<p>libs =  " -r irb/completion"</p>

<h1>Perhaps use a console_lib to store any extra methods I may want available in the console</h1>

<p>libs &lt;&lt;  " -r #{File.dirname(<strong>FILE</strong>) + '/../routes'}"
puts "Loading Poll chat"
exec "#{irb} #{libs} --simple-prompt"
```</p>

<p>The 3rd line has CALL iirb.bat as a command on a windows system. The CALL command is needed for the next step because we’re going to execute a batch file from another batch file on windows. Otherwise it wouldn’t work for me. CALL is very similar to exec in ruby and gives control to another executable until its task is done.</p>

<p>For windows to be able to use script/console (script\console) instead of ir script/console you also need to create a batch file called console.bat in the script folder.</p>

<p><code>bat console script
@ECHO OFF
IF NOT "%~f0" == "~f0" GOTO :WinNT
@"ir.exe" "script/console" %1 %2 %3 %4 %5 %6 %7 %8 %9
GOTO :EOF
:WinNT
@"ir.exe" "%~dpn0" %*
</code></p>

<p>This is all there is to it to get rails like scripting abilities.</p>

<p>IronRuby has another really cool feature built into IronRuby is the ability to provide REPL’s for your application at run-time. All you need to do is use Repl.new and give it an output and input stream.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating launcher scripts for IronRuby]]></title>
    <link href="http://flanders.co.nz/2009/10/26/creating-launcher-scripts-for-ironruby/"/>
    <updated>2009-10-26T14:16:48+01:00</updated>
    <id>http://flanders.co.nz/2009/10/26/creating-launcher-scripts-for-ironruby</id>
    <content type="html"><![CDATA[<p>It’s been a while since I blogged, I’ve been terribly busy going through some changes and prepping the book.</p>

<p>Anyway lately a lot of blog posts have been written on how to ironruby with cucumber to test your .NET code. While I think it’s great people are using ironruby and cucumber, the guide you can find on aslak’s github wiki isn’t the most ideal solution as it will only work for windows and it requires MRI to be installed on your system. So I thought I’d write up how I’ve been creating launchers that work both on windows .NET and mono systems.</p>

<p>Another problem the approach of setting the GEM_PATH to the MRI gem location is that if your gem requires a C-extension (which could easily be a C# extension in IronRuby) ruby will get confused about which one it’s going to need.</p>

<p>I’m going to use cucumber as an example but this counts for most ruby libraries. I’ve been using this for a few months already so it really doesn’t matter which version of IronRuby you’ve got installed. I’ve compiled a fresh version from github and deployed that to C:\ironruby on windows and added C:\ironruby\bin to my PATH environment variable. I installed my ironruby version on my *nix boxes in /usr/local/ironruby and added /usr/local/ironruby/bin, /usr/local/ironruby/silverlight/bin and /usr/local/ironruby/silverlight/scripts to my PATH environment variable.</p>

<h5>1. install the gem: igem install rspec cucumber --no-rdoc --no-ri</h5>

<p>this will install the rspec and cucumber gems with their dependencies. And the gems process will actually install the launcher scripts in C:\ironruby\lib\ironruby\gems\1.8\bin and we’re going to use those scripts to create our launcher script</p>

<h5>2. Get the launcher scripts into the bin dir</h5>

<p>On windows you can now go:</p>

<pre><code>copy C:\ironruby\lib\ironruby\gems\1.8\bin\cucumber C:\ironruby\bin\icucumber
copy C:\ironruby\lib\ironruby\gems\1.8\bin\cucumber.bat C:\ironruby\bin\icucumber.bat
</code></pre>

<p>NTFS supports symlinks so you could also use the junction tool from the sysinternals toolkit to create those instead of copying the files. <a href="http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx">http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx</a></p>

<p>On *nix based systems there is one more step to go through.</p>

<pre><code>cp /usr/local/ironruby/lib/IronRuby/gems/1.8/bin/cucumber /usr/local/ironruby/bin/icucumber
chmod +x /usr/local/ironruby/bin/icucumber
</code></pre>

<p>And this is the easier way to properly use installed gems from the ironruby distribution, it will also make it a lot easier to upgrade your gems in 2 different ruby installations at different times etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A rant on a talk falling to pieces]]></title>
    <link href="http://flanders.co.nz/2009/07/02/a-rant-on-a-talk-falling-to-pieces/"/>
    <updated>2009-07-02T14:45:21+02:00</updated>
    <id>http://flanders.co.nz/2009/07/02/a-rant-on-a-talk-falling-to-pieces</id>
    <content type="html"><![CDATA[<p>Earlier this week I had the pleasure of doing a talk for the Belgian .NET user group. During this talk I ran in to all kinds of problems. I've done presentations where I was royally underprepared and to avoid that this time I actually started prepping for this talk on time. I was done on time, was prepared had 5 backups of my presentation and samples. What did I learn from this, if you're prepared other things will go wrong.    <br/>
I'll share the story of stuff that can go wrong.</p>

<p>Before starting the rant I have some links to share.</p>

<ul>
<li><p><a href="http://www.slideshare.net/casualjim/ruby-loves-dot-net">Slides</a></p></li>
<li><p>IronRubyMvc sample – <a href="http://irtodo.koolkraft.net/">live demo</a> – <a href="http://github.com/casualjim/ironrubymvc-sample/tree/master">source</a></p></li>
<li><p>Silverlight sample – <a href="http://samples.koolkraft.net/picture_view/">live demo</a> – <a href="http://samples.koolkraft.net/picture_view.zip">source</a></p></li>
<li><p>IronRubyMVC specs – <a href="http://github.com/casualjim/ironrubymvc/tree">source</a></p></li>
<li><p>Sinatra – <a href="http://samples.koolkraft.net/sinatra.zip">source</a></p></li>
<li><p>Metaprogramming - <a href="http://samples.koolkraft.net/metaprogramming.zip">source</a></p></li>
</ul>


<p>I have a device that I call internet on a stick, which is a vodafone usb 3G modem that I plug in to my system and it gets me on the internet (mistake 1). Since I assumed that that thing would continue to work I made most of my demos internet enabled (mistake 2). For example I have a demo where I go download pics from flickr and then show them with some animations with silverlight.    <br/>
Before my presentation I changed the fonts, opened all the files I was going to talk about ran all the demos again to make sure they would work and everything went fine.     <br/>
I unplug the USB device and go into the room to hook up the projector etc. The presentation starts and for the first hour everything went really well (from my perspective at least don't know about the people attending).     <br/>
We have a break and I plug the USB device in, at this point the vodafone program hangs (first time ever I swear). What's more I can't make it go away at all so I reboot my pc (this is still during the break).</p>

<p>Now I'm getting a little desperate because it still doesn't work. With rebooting I also lost all my carefully opened files earlier (I'm showing code in about 3 different environments and 2 different OS'es).    <br/>
So during the presentation I apologise and try to reboot once more while taking questions from the audience and hoping somebody will try to start a discussion with me. After rebooting I got a message saying my date was set to 2001 which I thought was peculiar but clicked it away. I boot vmware fusion with windows 7 (this took fairly long and is a little bit funky as the screen resolution changes a lot during this process).     <br/>
Ok so far so good, by now I've already skipped the silverlight demo promising that it will be available as a download on my blog and will be moving on to the ironrubymvc sample. To prove I do actually use visual studio at times I wanted to open my demo project in visual studio. I open visual studio only for it to tell me that my trial has expired and I can either upgrade or close the application. Oooooookay this is completely weird because i get my software through my msdn subscription and I had been using it earlier that day.</p>

<p>Moral of the story: Either go vastly underprepared and wing it. Or don't rely on the internet and always take at least 2 laptops that have identical configurations but I'm pretty sure those would or explode in my face or something will fall from the ceiling, building collapses or other mishaps.</p>

<p>Instead of having one demo go bad on me now I'm probably facing a reinstall of my mac because it lost a bunch of settings, for which I'm holding the vodafone responsible. At this moment I'm fairly certain that I should go less prepared and just wing it just out of fear for bigger disasters, people may die.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Very simple IronRuby MVC sample application]]></title>
    <link href="http://flanders.co.nz/2009/06/09/very-simple-ironruby-mvc-sample-application/"/>
    <updated>2009-06-09T23:45:03+02:00</updated>
    <id>http://flanders.co.nz/2009/06/09/very-simple-ironruby-mvc-sample-application</id>
    <content type="html"><![CDATA[<p>Over the weekend I wrote a very simple task list application with IronRuby MVC and LightSpeed as an OR/M. And I’ve just put a demo live. This demo is running on a windows 2008 vps with IIS 7 as webserver. The source of this sample is also available.</p>

<p>At this moment I’m working on the <a href="http://github.com/jschementi/ironrubymvc/">Ironruby mvc</a> sample for my book. And while I was playing around to get some samples together I tried building the simplest application possible that has some degree relations in the db and does some crud. And I came up with the original idea of creating a task list application.</p>

<p>As an OR/M I choose to use <a href="http://www.mindscape.co.nz/products/LightSpeed/">LightSpeed</a> and it runs on a sqlite database so it should be immediately usable after checking out. There is one caveat though. If you’re using a 32-bit OS you’ll need to replace the sqlite dll that is included in the dependencies tree with a 32-bit version of the dll and rebuild the solution.</p>

<p>The links:</p>

<p>Demo:    <br/>
<a href="http://irtodo.koolkraft.net/">http://irtodo.koolkraft.net/</a></p>

<p>Source of sample:   <br/>
<a href="http://github.com/casualjim/ironrubymvc-sample">http://github.com/casualjim/ironrubymvc-sample</a></p>

<p>IronRubyMVC source:</p>

<p><a href="http://github.com/jschementi/ironrubymvc">http://github.com/jschementi/ironrubymvc</a></p>

<p>LightSpeed:   <br/>
<a href="http://www.mindscape.co.nz/products/LightSpeed/">http://www.mindscape.co.nz/products/LightSpeed/</a></p>

<p>Technorati Tags: <a href="http://technorati.com/tags/IronRuby+MVC">IronRuby MVC</a>,<a href="http://technorati.com/tags/IronRuby">IronRuby</a>,<a href="http://technorati.com/tags/ASP.NET+MVC">ASP.NET MVC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Caricature and IronRuby]]></title>
    <link href="http://flanders.co.nz/2009/05/21/getting-started-with-caricature-and-ironruby/"/>
    <updated>2009-05-21T14:52:17+02:00</updated>
    <id>http://flanders.co.nz/2009/05/21/getting-started-with-caricature-and-ironruby</id>
    <content type="html"><![CDATA[<p>IronRuby 0.5 was released yesterday. You can download it on <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25902#DownloadId=68919">codeplex</a>. This post will explain how you setup your ironruby environment to use it for testing existing CLR based assemblies. We’ll touch installing gems using rake and most importantly writing a test for a CLR based class where we’ll mock out the dependencies.</p>

<p>The first thing you need to do is download <a href="http://ironruby.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25902#DownloadId=68919">IronRuby</a>. After downloading you can extract it to a location on your hard drive. I extracted mine to C:\ironruby</p>

<p>Now we need to add the path to ir.exe to our PATH variable so we can use it from the command-line. And that is all there is to it to install ironruby on your machine. Now we need to get the necessary gems onto our system. We’ll need bacon and caricature.</p>

<p>Open a console and type the following:</p>

<p>igem list will show you a list of the gems you have installed on your system.</p>

<p>igem install will fetch and install a gem on your system. To install the gems we’re going to need we need to execute the command</p>

<p>igem install bacon caricature</p>

<p>That will result in the following output:</p>

<pre><code>+ C:\tools
» cmd
Microsoft Windows [Version 6.1.7100]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\tools&gt;where ir
C:\ironruby\bin\ir.exe

C:\tools&gt;exit
+ C:\tools
» igem list

*** LOCAL GEMS ***


+ C:\tools
» igem install bacon caricature
Successfully installed bacon-1.1.0
Successfully installed caricature-0.6.0
3 gems installed
Installing ri documentation for bacon-1.1.0...
Installing ri documentation for caricature-0.6.0...
Installing RDoc documentation for bacon-1.1.0...
Installing RDoc documentation for caricature-0.6.0...
</code></pre>

<p>If you would try to execute ibacon at this point that would work. We’ll need to create 2 small files to get ibacon to work. In the bin directory of ironruby I created 2 files one called ibacon and the other one is ibacon.bat</p>

<p>```ruby ibacon</p>

<h1>!C:/ironruby/bin/ir.exe</h1>

<p>#</p>

<h1>This file was generated by RubyGems.</h1>

<p>#</p>

<h1>The application 'bacon' is installed as part of a gem, and</h1>

<h1>this file is here to facilitate running it.</h1>

<p>#</p>

<p>require 'rubygems'</p>

<p>version = ">= 0"</p>

<p>if ARGV.first =~ /<sup><em>(.*)</em>$/</sup> and Gem::Version.correct? $1 then
  version = $1
  ARGV.shift
end</p>

<p>gem 'bacon', version
load 'bacon'
```</p>

<p>``` bat ibacon.bat
@ECHO OFF</p>

<p>@"ir.exe" "%~dpn0" %*
```</p>

<p>At this point you’re ready to start writing specs with bacon and caricature. Let’s look at an example I wrote for the controller factory for ironruby mvc.</p>

<p>We’re going to test the following C# code.</p>

<p>``` csharp Models.cs  <br/>
public interface IWeapon{</p>

<pre><code>int Attack(IWarrior warrior);
int Damage();
</code></pre>

<p>}</p>

<p>public interface IWarrior
{</p>

<pre><code>int Id { get; }    
string Name { get; set; }
bool IsKilledBy(IWeapon weapon);
int Attack(IWarrior target, IWeapon weapon);
int SurviveAttackWith(IWeapon weapon);
</code></pre>

<p>}</p>

<p>public class Sword : IWeapon
{</p>

<pre><code>public int Attack(IWarrior warrior){
    return warrior.SurviveAttackWith(this);
}

public int Damage(){
    return 4;
}
</code></pre>

<p>}
```</p>

<p>I generally create a bacon_helper.rb file where I group my requires and helper functions etc. In the case of this test I have the following in the bacon_helper.rb:</p>

<p>``` ruby bacon_helper.rb</p>

<h1>add some search paths to ironruby</h1>

<h1>this first one adds the path with the assemblies</h1>

<h1>this enables us not to have to specify a path to the assemblies everywhere.</h1>

<p>$: &lt;&lt; File.dirname(<strong>FILE</strong>) + "/bin"</p>

<h1>adds the path to the caricature library.</h1>

<p>$: &lt;&lt; File.dirname(<strong>FILE</strong>) + "/../lib"</p>

<h1>load the caricature library</h1>

<p>require "caricature"
require 'caricature/clr'</p>

<h1>load the bacon library</h1>

<p>require 'bacon'</p>

<h1>Add the .NET framework</h1>

<p>require 'mscorlib'</p>

<h1>load the assembly with the C# code</h1>

<p>load_assembly 'ClrModels'
```</p>

<p>At this point we’re ready to start writing the test. create a file called sword_spec.rb and we’ll add the following content to the file.</p>

<p>``` ruby swordspec.rb  <br/>
require File.dirname(<strong>FILE</strong>) + "/bacon_helper.rb"</p>

<p>describe "ClrModels::Sword" do</p>

<p>  before do</p>

<pre><code>@warrior = Caricature::Isolation.for ClrModels::IWarrior
</code></pre>

<p>  end</p>

<p>  it "should call survive_attack on the mock" do</p>

<pre><code>@warrior.when_receiving(:survive_attack_with).return(5)

sword = ClrModels::Sword.new
sword.attack(@warrior).should.equal 5

@warrior.did_receive?(:survive_attack_with).should.be.successful
</code></pre>

<p>  end</p>

<p>  it "should return different results when expectation is defined with arguments" do</p>

<pre><code>sword1 = ClrModels::Sword.new
sword2 = ClrModels::Sword.new

@warrior.when_receiving(:survive_attack_with).return(5)
@warrior.when_receiving(:survive_attack_with).with(sword2).return(15)

sword1.attack(@warrior).should.equal 5
sword2.attack(@warrior).should.equal 15

@warrior.did_receive?(:survive_attack_with).with(sword2).should.be.successful
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>So now we’ve got 2 tests for our Sword class. The only thing that is left to do is to run the specs. You can do that by executing the ibacon command and passing it the file you want to test.</p>

<pre><code>+ C:\dev\caricature
(master) » ibacon spec/sword_spec.rb
ClrModels::Sword
- should call survive_attack on the mock
- should return different results when expectation is defined with arguments

2 specifications (5 requirements), 0 failures, 0 errors
</code></pre>
]]></content>
  </entry>
  
</feed>
